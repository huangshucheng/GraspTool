<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetyDu.HttpParse</name>
    </assembly>
    <members>
        <member name="T:JetyDu.HttpParse.Crc32">
            <summary>
            A utility class to compute CRC32.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.Crc32.CRC32Bytes(System.Byte[])">
            <summary>
            Compute a checksum for a given array of bytes.
            </summary>
            <param name="bytes">The array of bytes to compute the checksum for.</param>
            <returns>The computed checksum.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Crc32.CRC32String(System.String)">
            <summary>
            Compute a checksum for a given string.
            </summary>
            <param name="text">The string to compute the checksum for.</param>
            <returns>The computed checksum.</returns>
        </member>
        <member name="T:JetyDu.HttpParse.HtmlAttribute">
            <summary>
            Represents an HTML attribute.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlAttribute.Line">
            <summary>
            Gets the line number of this attribute in the document.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlAttribute.LinePosition">
            <summary>
            Gets the column number of this attribute in the document.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlAttribute.ValueStartIndex">
            <summary>
            Gets the stream position of the value of this attribute in the document, relative to the start of the document.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlAttribute.ValueLength">
            <summary>
            Gets the length of the value.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlAttribute.Name">
            <summary>
            Gets the qualified name of the attribute.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlAttribute.OriginalName">
            <summary>
            Name of attribute with original case
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlAttribute.OwnerDocument">
            <summary>
            Gets the HTML document to which this attribute belongs.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlAttribute.OwnerNode">
            <summary>
            Gets the HTML node to which this attribute belongs.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlAttribute.QuoteType">
            <summary>
            Specifies what type of quote the data should be wrapped in
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlAttribute.StreamPosition">
            <summary>
            Gets the stream position of this attribute in the document, relative to the start of the document.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlAttribute.Value">
            <summary>
            Gets or sets the value of the attribute.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlAttribute.DeEntitizeValue">
            <summary>
            Gets the DeEntitized value of the attribute.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlAttribute.XPath">
            <summary>
            Gets a valid XPath string that points to this Attribute
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlAttribute.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another attribute. Comparison is based on attributes' name.
            </summary>
            <param name="obj">An attribute to compare with this instance.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the names comparison.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlAttribute.Clone">
            <summary>
            Creates a duplicate of this attribute.
            </summary>
            <returns>The cloned attribute.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlAttribute.Remove">
            <summary>
            Removes this attribute from it's parents collection
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.AttributeValueQuote">
            <summary>
            An Enum representing different types of Quotes used for surrounding attribute values
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.AttributeValueQuote.SingleQuote">
            <summary>
            A single quote mark '
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.AttributeValueQuote.DoubleQuote">
            <summary>
            A double quote mark "
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.HtmlAttributeCollection">
            <summary>
            Represents a combined list and collection of HTML nodes.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlAttributeCollection.Count">
            <summary>
            Gets the number of elements actually contained in the list.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlAttributeCollection.IsReadOnly">
            <summary>
            Gets readonly status of colelction
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlAttributeCollection.Item(System.Int32)">
            <summary>
            Gets the attribute at the specified index.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlAttributeCollection.Item(System.String)">
            <summary>
            Gets a given attribute from the list using its name.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlAttributeCollection.Add(JetyDu.HttpParse.HtmlAttribute)">
            <summary>
            Adds supplied item to collection
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlAttributeCollection.System#Collections#Generic#ICollection{JetyDu#HttpParse#HtmlAttribute}#Clear">
            <summary>
            Explicit clear
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlAttributeCollection.Contains(JetyDu.HttpParse.HtmlAttribute)">
            <summary>
            Retreives existence of supplied item
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlAttributeCollection.CopyTo(JetyDu.HttpParse.HtmlAttribute[],System.Int32)">
            <summary>
            Copies collection to array
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlAttributeCollection.System#Collections#Generic#IEnumerable{JetyDu#HttpParse#HtmlAttribute}#GetEnumerator">
            <summary>
            Get Explicit enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlAttributeCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Explicit non-generic enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlAttributeCollection.IndexOf(JetyDu.HttpParse.HtmlAttribute)">
            <summary>
            Retrieves the index for the supplied item, -1 if not found
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlAttributeCollection.Insert(System.Int32,JetyDu.HttpParse.HtmlAttribute)">
            <summary>
            Inserts given item into collection at supplied index
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlAttributeCollection.System#Collections#Generic#ICollection{JetyDu#HttpParse#HtmlAttribute}#Remove(JetyDu.HttpParse.HtmlAttribute)">
            <summary>
            Explicit collection remove
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlAttributeCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the attribute at the specified index.
            </summary>
            <param name="index">The index of the attribute to remove.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlAttributeCollection.Add(System.String,System.String)">
            <summary>
            Adds a new attribute to the collection with the given values
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlAttributeCollection.Append(JetyDu.HttpParse.HtmlAttribute)">
            <summary>
            Inserts the specified attribute as the last attribute in the collection.
            </summary>
            <param name="newAttribute">The attribute to insert. May not be null.</param>
            <returns>The appended attribute.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlAttributeCollection.Append(System.String)">
            <summary>
            Creates and inserts a new attribute as the last attribute in the collection.
            </summary>
            <param name="name">The name of the attribute to insert.</param>
            <returns>The appended attribute.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlAttributeCollection.Append(System.String,System.String)">
            <summary>
            Creates and inserts a new attribute as the last attribute in the collection.
            </summary>
            <param name="name">The name of the attribute to insert.</param>
            <param name="value">The value of the attribute to insert.</param>
            <returns>The appended attribute.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlAttributeCollection.Contains(System.String)">
            <summary>
            Checks for existance of attribute with given name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlAttributeCollection.Prepend(JetyDu.HttpParse.HtmlAttribute)">
            <summary>
            Inserts the specified attribute as the first node in the collection.
            </summary>
            <param name="newAttribute">The attribute to insert. May not be null.</param>
            <returns>The prepended attribute.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlAttributeCollection.Remove(JetyDu.HttpParse.HtmlAttribute)">
            <summary>
            Removes a given attribute from the list.
            </summary>
            <param name="attribute">The attribute to remove. May not be null.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlAttributeCollection.Remove(System.String)">
            <summary>
            Removes an attribute from the list, using its name. If there are more than one attributes with this name, they will all be removed.
            </summary>
            <param name="name">The attribute's name. May not be null.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlAttributeCollection.RemoveAll">
            <summary>
            Remove all attributes in the list.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlAttributeCollection.AttributesWithName(System.String)">
            <summary>
            Returns all attributes with specified name. Handles case insentivity
            </summary>
            <param name="attributeName">Name of the attribute</param>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlAttributeCollection.Remove">
            <summary>
            Removes all attributes from the collection
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlAttributeCollection.Clear">
            <summary>
            Clears the attribute collection
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.HtmlCommentNode">
            <summary>
            Represents an HTML comment.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlCommentNode.Comment">
            <summary>
            Gets or Sets the comment text of the node.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlCommentNode.InnerHtml">
            <summary>
            Gets or Sets the HTML between the start and end tags of the object. In the case of a text node, it is equals to OuterHtml.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlCommentNode.OuterHtml">
            <summary>
            Gets or Sets the object and its content in HTML.
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.HtmlDocument">
            <summary>
            Represents a complete HTML document.
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.HtmlDocument.DisableBehavaiorTagP">
            <summary>True to disable, false to enable the behavaior tag p.</summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlDocument.DefaultBuilder">
            <summary>Default builder to use in the HtmlDocument constructor</summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlDocument.ParseExecuting">
            <summary>Action to execute before the Parse is executed</summary>
        </member>
        <member name="F:JetyDu.HttpParse.HtmlDocument._maxDepthLevel">
            <summary>
            Defines the max level we would go deep into the html document
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.HtmlDocument.Text">
            <summary>The HtmlDocument Text. Careful if you modify it.</summary>
        </member>
        <member name="F:JetyDu.HttpParse.HtmlDocument.BackwardCompatibility">
            <summary>True to stay backward compatible with previous version of HAP. This option does not guarantee 100% compatibility.</summary>
        </member>
        <member name="F:JetyDu.HttpParse.HtmlDocument.OptionAddDebuggingAttributes">
            <summary>
            Adds Debugging attributes to node. Default is false.
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.HtmlDocument.OptionAutoCloseOnEnd">
            <summary>
            Defines if closing for non closed nodes must be done at the end or directly in the document.
            Setting this to true can actually change how browsers render the page. Default is false.
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.HtmlDocument.OptionCheckSyntax">
            <summary>
            Defines if non closed nodes will be checked at the end of parsing. Default is true.
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.HtmlDocument.OptionComputeChecksum">
            <summary>
            Defines if a checksum must be computed for the document while parsing. Default is false.
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.HtmlDocument.OptionEmptyCollection">
            <summary>
            Defines if SelectNodes method will return null or empty collection when no node matched the XPath expression.
            Setting this to true will return empty collection and false will return null. Default is false.
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.HtmlDocument.DisableServerSideCode">
            <summary>True to disable, false to enable the server side code.</summary>
        </member>
        <member name="F:JetyDu.HttpParse.HtmlDocument.OptionDefaultStreamEncoding">
            <summary>
            Defines the default stream encoding to use. Default is System.Text.Encoding.Default.
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.HtmlDocument.OptionExtractErrorSourceText">
            <summary>
            Defines if source text must be extracted while parsing errors.
            If the document has a lot of errors, or cascading errors, parsing performance can be dramatically affected if set to true.
            Default is false.
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.HtmlDocument.OptionExtractErrorSourceTextMaxLength">
            <summary>
            Defines the maximum length of source text or parse errors. Default is 100.
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.HtmlDocument.OptionFixNestedTags">
            <summary>
            Defines if LI, TR, TH, TD tags must be partially fixed when nesting errors are detected. Default is false.
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.HtmlDocument.OptionOutputAsXml">
            <summary>
            Defines if output must conform to XML, instead of HTML.
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.HtmlDocument.OptionPreserveXmlNamespaces">
            <summary>
            If used together with <see cref="F:JetyDu.HttpParse.HtmlDocument.OptionOutputAsXml"/> and enabled, Xml namespaces in element names are preserved. Default is false.
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.HtmlDocument.OptionOutputOptimizeAttributeValues">
            <summary>
            Defines if attribute value output must be optimized (not bound with double quotes if it is possible). Default is false.
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.HtmlDocument.OptionOutputOriginalCase">
            <summary>
            Defines if name must be output with it's original case. Useful for asp.net tags and attributes
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.HtmlDocument.OptionOutputUpperCase">
            <summary>
            Defines if name must be output in uppercase. Default is false.
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.HtmlDocument.OptionReadEncoding">
            <summary>
            Defines if declared encoding must be read from the document.
            Declared encoding is determined using the meta http-equiv="content-type" content="text/html;charset=XXXXX" html node.
            Default is true.
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.HtmlDocument.OptionStopperNodeName">
            <summary>
            Defines the name of a node that will throw the StopperNodeException when found as an end node. Default is null.
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.HtmlDocument.OptionUseIdAttribute">
            <summary>
            Defines if the 'id' attribute must be specifically used. Default is true.
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.HtmlDocument.OptionWriteEmptyNodes">
            <summary>
            Defines if empty nodes must be written as closed during output. Default is false.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlDocument.#ctor">
            <summary>
            Creates an instance of an HTML document.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlDocument.ParsedText">
            <summary>Gets the parsed text.</summary>
            <value>The parsed text.</value>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlDocument.MaxDepthLevel">
            <summary>
            Defines the max level we would go deep into the html document. If this depth level is exceeded, and exception is
            thrown.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlDocument.CheckSum">
            <summary>
            Gets the document CRC32 checksum if OptionComputeChecksum was set to true before parsing, 0 otherwise.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlDocument.DeclaredEncoding">
            <summary>
            Gets the document's declared encoding.
            Declared encoding is determined using the meta http-equiv="content-type" content="text/html;charset=XXXXX" html node (pre-HTML5) or the meta charset="XXXXX" html node (HTML5).
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlDocument.DocumentNode">
            <summary>
            Gets the root node of the document.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlDocument.Encoding">
            <summary>
            Gets the document's output encoding.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlDocument.ParseErrors">
            <summary>
            Gets a list of parse errors found in the document.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlDocument.Remainder">
            <summary>
            Gets the remaining text.
            Will always be null if OptionStopperNodeName is null.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlDocument.RemainderOffset">
            <summary>
            Gets the offset of Remainder in the original Html text.
            If OptionStopperNodeName is null, this will return the length of the original Html text.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlDocument.StreamEncoding">
            <summary>
            Gets the document's stream encoding.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlDocument.GetXmlName(System.String)">
            <summary>
            Gets a valid XML name.
            </summary>
            <param name="name">Any text.</param>
            <returns>A string that is a valid XML name.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlDocument.HtmlEncode(System.String)">
            <summary>
            Applies HTML encoding to a specified string.
            </summary>
            <param name="html">The input string to encode. May not be null.</param>
            <returns>The encoded string.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlDocument.IsWhiteSpace(System.Int32)">
            <summary>
            Determines if the specified character is considered as a whitespace character.
            </summary>
            <param name="c">The character to check.</param>
            <returns>true if if the specified character is considered as a whitespace character.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlDocument.CreateAttribute(System.String)">
            <summary>
            Creates an HTML attribute with the specified name.
            </summary>
            <param name="name">The name of the attribute. May not be null.</param>
            <returns>The new HTML attribute.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlDocument.CreateAttribute(System.String,System.String)">
            <summary>
            Creates an HTML attribute with the specified name.
            </summary>
            <param name="name">The name of the attribute. May not be null.</param>
            <param name="value">The value of the attribute.</param>
            <returns>The new HTML attribute.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlDocument.CreateComment">
            <summary>
            Creates an HTML comment node.
            </summary>
            <returns>The new HTML comment node.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlDocument.CreateComment(System.String)">
            <summary>
            Creates an HTML comment node with the specified comment text.
            </summary>
            <param name="comment">The comment text. May not be null.</param>
            <returns>The new HTML comment node.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlDocument.CreateElement(System.String)">
            <summary>
            Creates an HTML element node with the specified name.
            </summary>
            <param name="name">The qualified name of the element. May not be null.</param>
            <returns>The new HTML node.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlDocument.CreateTextNode">
            <summary>
            Creates an HTML text node.
            </summary>
            <returns>The new HTML text node.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlDocument.CreateTextNode(System.String)">
            <summary>
            Creates an HTML text node with the specified text.
            </summary>
            <param name="text">The text of the node. May not be null.</param>
            <returns>The new HTML text node.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlDocument.DetectEncoding(System.IO.Stream)">
            <summary>
            Detects the encoding of an HTML stream.
            </summary>
            <param name="stream">The input stream. May not be null.</param>
            <returns>The detected encoding.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlDocument.DetectEncoding(System.IO.Stream,System.Boolean)">
            <summary>
            Detects the encoding of an HTML stream.
            </summary>
            <param name="stream">The input stream. May not be null.</param>
            <param name="checkHtml">The html is checked.</param>
            <returns>The detected encoding.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlDocument.DetectEncoding(System.IO.TextReader)">
            <summary>
            Detects the encoding of an HTML text provided on a TextReader.
            </summary>
            <param name="reader">The TextReader used to feed the HTML. May not be null.</param>
            <returns>The detected encoding.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlDocument.DetectEncodingHtml(System.String)">
            <summary>
            Detects the encoding of an HTML text.
            </summary>
            <param name="html">The input html text. May not be null.</param>
            <returns>The detected encoding.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlDocument.GetElementbyId(System.String)">
            <summary>
            Gets the HTML node with the specified 'id' attribute value.
            </summary>
            <param name="id">The attribute id to match. May not be null.</param>
            <returns>The HTML node with the matching id or null if not found.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlDocument.Load(System.IO.Stream)">
            <summary>
            Loads an HTML document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlDocument.Load(System.IO.Stream,System.Boolean)">
            <summary>
            Loads an HTML document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the stream.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlDocument.Load(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Loads an HTML document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlDocument.Load(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Loads an HTML document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the stream.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlDocument.Load(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32)">
            <summary>
            Loads an HTML document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the stream.</param>
            <param name="buffersize">The minimum buffer size.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlDocument.Load(System.IO.TextReader)">
            <summary>
            Loads the HTML document from the specified TextReader.
            </summary>
            <param name="reader">The TextReader used to feed the HTML data into the document. May not be null.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlDocument.LoadHtml(System.String)">
            <summary>
            Loads the HTML document from the specified string.
            </summary>
            <param name="html">String containing the HTML document to load. May not be null.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlDocument.Save(System.IO.Stream)">
            <summary>
            Saves the HTML document to the specified stream.
            </summary>
            <param name="outStream">The stream to which you want to save.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlDocument.Save(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Saves the HTML document to the specified stream.
            </summary>
            <param name="outStream">The stream to which you want to save. May not be null.</param>
            <param name="encoding">The character encoding to use. May not be null.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlDocument.Save(System.IO.StreamWriter)">
            <summary>
            Saves the HTML document to the specified StreamWriter.
            </summary>
            <param name="writer">The StreamWriter to which you want to save.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlDocument.Save(System.IO.TextWriter)">
            <summary>
            Saves the HTML document to the specified TextWriter.
            </summary>
            <param name="writer">The TextWriter to which you want to save. May not be null.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlDocument.Save(System.Xml.XmlWriter)">
            <summary>
            Saves the HTML document to the specified XmlWriter.
            </summary>
            <param name="writer">The XmlWriter to which you want to save.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlDocument.DetectEncodingAndLoad(System.String)">
            <summary>
            Detects the encoding of an HTML document from a file first, and then loads the file.
            </summary>
            <param name="path">The complete file path to be read.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlDocument.DetectEncodingAndLoad(System.String,System.Boolean)">
            <summary>
            Detects the encoding of an HTML document from a file first, and then loads the file.
            </summary>
            <param name="path">The complete file path to be read. May not be null.</param>
            <param name="detectEncoding">true to detect encoding, false otherwise.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlDocument.DetectEncoding(System.String)">
            <summary>
            Detects the encoding of an HTML file.
            </summary>
            <param name="path">Path for the file containing the HTML document to detect. May not be null.</param>
            <returns>The detected encoding.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlDocument.Load(System.String)">
            <summary>
            Loads an HTML document from a file.
            </summary>
            <param name="path">The complete file path to be read. May not be null.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlDocument.Load(System.String,System.Boolean)">
            <summary>
            Loads an HTML document from a file.
            </summary>
            <param name="path">The complete file path to be read. May not be null.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlDocument.Load(System.String,System.Text.Encoding)">
            <summary>
            Loads an HTML document from a file.
            </summary>
            <param name="path">The complete file path to be read. May not be null.</param>
            <param name="encoding">The character encoding to use. May not be null.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlDocument.Load(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Loads an HTML document from a file.
            </summary>
            <param name="path">The complete file path to be read. May not be null.</param>
            <param name="encoding">The character encoding to use. May not be null.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlDocument.Load(System.String,System.Text.Encoding,System.Boolean,System.Int32)">
            <summary>
            Loads an HTML document from a file.
            </summary>
            <param name="path">The complete file path to be read. May not be null.</param>
            <param name="encoding">The character encoding to use. May not be null.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
            <param name="buffersize">The minimum buffer size.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlDocument.Save(System.String)">
            <summary>
            Saves the mixed document to the specified file.
            </summary>
            <param name="filename">The location of the file where you want to save the document.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlDocument.Save(System.String,System.Text.Encoding)">
            <summary>
            Saves the mixed document to the specified file.
            </summary>
            <param name="filename">The location of the file where you want to save the document. May not be null.</param>
            <param name="encoding">The character encoding to use. May not be null.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlDocument.CreateNavigator">
            <summary>
            Creates a new XPathNavigator object for navigating this HTML document.
            </summary>
            <returns>An XPathNavigator object. The XPathNavigator is positioned on the root of the document.</returns>
        </member>
        <member name="T:JetyDu.HttpParse.HtmlElementFlag">
            <summary>
            Flags that describe the behavior of an Element node.
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.HtmlElementFlag.CData">
            <summary>
            The node is a CDATA node.
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.HtmlElementFlag.Empty">
            <summary>
            The node is empty. META or IMG are example of such nodes.
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.HtmlElementFlag.Closed">
            <summary>
            The node will automatically be closed during parsing.
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.HtmlElementFlag.CanOverlap">
            <summary>
            The node can overlap.
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.HtmlEntity">
            <summary>
            A utility class to replace special characters by entities and vice-versa.
            Follows HTML 4.0 specification found at http://www.w3.org/TR/html4/sgml/entities.html
            Follows Additional specification found at https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references
            See also: https://html.spec.whatwg.org/multipage/named-characters.html#named-character-references
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlEntity.EntityName">
            <summary>
            A collection of entities indexed by name.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlEntity.EntityValue">
            <summary>
            A collection of entities indexed by value.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlEntity.DeEntitize(System.String)">
            <summary>
            Replace known entities by characters.
            </summary>
            <param name="text">The source text.</param>
            <returns>The result text.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlEntity.Entitize(JetyDu.HttpParse.HtmlNode)">
            <summary>
            Clone and entitize an HtmlNode. This will affect attribute values and nodes' text. It will also entitize all child nodes.
            </summary>
            <param name="node">The node to entitize.</param>
            <returns>An entitized cloned node.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlEntity.Entitize(System.String)">
            <summary>
            Replace characters above 127 by entities.
            </summary>
            <param name="text">The source text.</param>
            <returns>The result text.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlEntity.Entitize(System.String,System.Boolean)">
            <summary>
            Replace characters above 127 by entities.
            </summary>
            <param name="text">The source text.</param>
            <param name="useNames">If set to false, the function will not use known entities name. Default is true.</param>
            <returns>The result text.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlEntity.Entitize(System.String,System.Boolean,System.Boolean)">
            <summary>
            Replace characters above 127 by entities.
            </summary>
            <param name="text">The source text.</param>
            <param name="useNames">If set to false, the function will not use known entities name. Default is true.</param>
            <param name="entitizeQuotAmpAndLtGt">If set to true, the [quote], [ampersand], [lower than] and [greather than] characters will be entitized.</param>
            <returns>The result text</returns>
        </member>
        <member name="T:JetyDu.HttpParse.HtmlNode">
            <summary>
            Represents an HTML node.
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.HtmlNode.HtmlNodeTypeNameComment">
            <summary>
            Gets the name of a comment node. It is actually defined as '#comment'.
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.HtmlNode.HtmlNodeTypeNameDocument">
            <summary>
            Gets the name of the document node. It is actually defined as '#document'.
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.HtmlNode.HtmlNodeTypeNameText">
            <summary>
            Gets the name of a text node. It is actually defined as '#text'.
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.HtmlNode.ElementsFlags">
            <summary>
            Gets a collection of flags that define specific behaviors for specific element nodes.
            The table contains a DictionaryEntry list with the lowercase tag name as the Key, and a combination of HtmlElementFlags as the Value.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.#cctor">
            <summary>
            Initialize HtmlNode. Builds a list of all tags that have special allowances
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.#ctor(JetyDu.HttpParse.HtmlNodeType,JetyDu.HttpParse.HtmlDocument,System.Int32)">
            <summary>
            Initializes HtmlNode, providing type, owner and where it exists in a collection
            </summary>
            <param name="type"></param>
            <param name="ownerdocument"></param>
            <param name="index"></param>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlNode.Attributes">
            <summary>
            Gets the collection of HTML attributes for this node. May not be null.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlNode.ChildNodes">
            <summary>
            Gets all the children of the node.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlNode.Closed">
            <summary>
            Gets a value indicating if this node has been closed or not.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlNode.ClosingAttributes">
            <summary>
            Gets the collection of HTML attributes for the closing tag. May not be null.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlNode.EndNode">
            <summary>
            Gets the closing tag of the node, null if the node is self-closing.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlNode.FirstChild">
            <summary>
            Gets the first child of the node.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlNode.HasAttributes">
            <summary>
            Gets a value indicating whether the current node has any attributes.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlNode.HasChildNodes">
            <summary>
            Gets a value indicating whether this node has any child nodes.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlNode.HasClosingAttributes">
            <summary>
            Gets a value indicating whether the current node has any attributes on the closing tag.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlNode.Id">
            <summary>
            Gets or sets the value of the 'id' HTML attribute. The document must have been parsed using the OptionUseIdAttribute set to true.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlNode.InnerHtml">
            <summary>
            Gets or Sets the HTML between the start and end tags of the object.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlNode.InnerText">
            <summary>
            Gets or Sets the text between the start and end tags of the object.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlNode.LastChild">
            <summary>
            Gets the last child of the node.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlNode.Line">
            <summary>
            Gets the line number of this node in the document.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlNode.LinePosition">
            <summary>
            Gets the column number of this node in the document.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlNode.InnerStartIndex">
            <summary>
            Gets the stream position of the area between the opening and closing tag of the node, relative to the start of the document.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlNode.InnerLength">
            <summary>
            Gets the length of the area between the opening and closing tag of the node.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlNode.OuterLength">
            <summary>
            Gets the length of the entire node, opening and closing tag included.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlNode.Name">
            <summary>
            Gets or sets this node's name.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlNode.NextSibling">
            <summary>
            Gets the HTML node immediately following this element.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlNode.NodeType">
            <summary>
            Gets the type of this node.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlNode.OriginalName">
            <summary>
            The original unaltered name of the tag
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlNode.OuterHtml">
            <summary>
            Gets or Sets the object and its content in HTML.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlNode.OwnerDocument">
            <summary>
            Gets the <see cref="T:JetyDu.HttpParse.HtmlDocument"/> to which this node belongs.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlNode.ParentNode">
            <summary>
            Gets the parent of this node (for nodes that can have parents).
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlNode.PreviousSibling">
            <summary>
            Gets the node immediately preceding this node.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlNode.StreamPosition">
            <summary>
            Gets the stream position of this node in the document, relative to the start of the document.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlNode.XPath">
            <summary>
            Gets a valid XPath string that points to this node
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.CanOverlapElement(System.String)">
            <summary>
            Determines if an element node can be kept overlapped.
            </summary>
            <param name="name">The name of the element node to check. May not be <c>null</c>.</param>
            <returns>true if the name is the name of an element node that can be kept overlapped, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.CreateNode(System.String)">
            <summary>
            Creates an HTML node from a string representing literal HTML.
            </summary>
            <param name="html">The HTML text.</param>
            <returns>The newly created node instance.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.IsCDataElement(System.String)">
            <summary>
            Determines if an element node is a CDATA element node.
            </summary>
            <param name="name">The name of the element node to check. May not be null.</param>
            <returns>true if the name is the name of a CDATA element node, false otherwise.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.IsClosedElement(System.String)">
            <summary>
            Determines if an element node is closed.
            </summary>
            <param name="name">The name of the element node to check. May not be null.</param>
            <returns>true if the name is the name of a closed element node, false otherwise.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.IsEmptyElement(System.String)">
            <summary>
            Determines if an element node is defined as empty.
            </summary>
            <param name="name">The name of the element node to check. May not be null.</param>
            <returns>true if the name is the name of an empty element node, false otherwise.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.IsOverlappedClosingElement(System.String)">
            <summary>
            Determines if a text corresponds to the closing tag of an node that can be kept overlapped.
            </summary>
            <param name="text">The text to check. May not be null.</param>
            <returns>true or false.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.Ancestors">
            <summary>
            Returns a collection of all ancestor nodes of this element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.Ancestors(System.String)">
            <summary>
            Get Ancestors with matching name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.AncestorsAndSelf">
            <summary>
            Returns a collection of all ancestor nodes of this element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.AncestorsAndSelf(System.String)">
            <summary>
            Gets all anscestor nodes and the current node
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.AppendChild(JetyDu.HttpParse.HtmlNode)">
            <summary>
            Adds the specified node to the end of the list of children of this node.
            </summary>
            <param name="newChild">The node to add. May not be null.</param>
            <returns>The node added.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.SetChildNodesId(JetyDu.HttpParse.HtmlNode)">
            <summary>Sets child nodes identifier.</summary>
            <param name="chilNode">The chil node.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.AppendChildren(JetyDu.HttpParse.HtmlNodeCollection)">
            <summary>
            Adds the specified node to the end of the list of children of this node.
            </summary>
            <param name="newChildren">The node list to add. May not be null.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.ChildAttributes(System.String)">
            <summary>
            Gets all Attributes with name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.Clone">
            <summary>
            Creates a duplicate of the node
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.CloneNode(System.String)">
            <summary>
            Creates a duplicate of the node and changes its name at the same time.
            </summary>
            <param name="newName">The new name of the cloned node. May not be <c>null</c>.</param>
            <returns>The cloned node.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.CloneNode(System.String,System.Boolean)">
            <summary>
            Creates a duplicate of the node and changes its name at the same time.
            </summary>
            <param name="newName">The new name of the cloned node. May not be null.</param>
            <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself.</param>
            <returns>The cloned node.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.CloneNode(System.Boolean)">
            <summary>
            Creates a duplicate of the node.
            </summary>
            <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself.</param>
            <returns>The cloned node.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.CopyFrom(JetyDu.HttpParse.HtmlNode)">
            <summary>
            Creates a duplicate of the node and the subtree under it.
            </summary>
            <param name="node">The node to duplicate. May not be <c>null</c>.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.CopyFrom(JetyDu.HttpParse.HtmlNode,System.Boolean)">
            <summary>
            Creates a duplicate of the node.
            </summary>
            <param name="node">The node to duplicate. May not be <c>null</c>.</param>
            <param name="deep">true to recursively clone the subtree under the specified node, false to clone only the node itself.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.DescendantNodes(System.Int32)">
            <summary>
            Gets all Descendant nodes for this node and each of child nodes
            </summary>
            <param name="level">The depth level of the node to parse in the html tree</param>
            <returns>the current element as an HtmlNode</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.DescendantNodesAndSelf">
            <summary>
            Returns a collection of all descendant nodes of this element, in document order
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.Descendants">
            <summary>
            Gets all Descendant nodes in enumerated list
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.Descendants(System.Int32)">
            <summary>
            Gets all Descendant nodes in enumerated list
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.Descendants(System.String)">
            <summary>
            Get all descendant nodes with matching name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.DescendantsAndSelf">
            <summary>
            Returns a collection of all descendant nodes of this element, in document order
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.DescendantsAndSelf(System.String)">
            <summary>
            Gets all descendant nodes including this node
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.Element(System.String)">
            <summary>
            Gets first generation child node matching name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.Elements(System.String)">
            <summary>
            Gets matching first generation child nodes matching name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.GetAttributeValue(System.String,System.String)">
            <summary>
            Helper method to get the value of an attribute of this node. If the attribute is not found, the default value will be returned.
            </summary>
            <param name="name">The name of the attribute to get. May not be <c>null</c>.</param>
            <param name="def">The default value to return if not found.</param>
            <returns>The value of the attribute if found, the default value if not found.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.GetAttributeValue(System.String,System.Int32)">
            <summary>
            Helper method to get the value of an attribute of this node. If the attribute is not found, the default value will be returned.
            </summary>
            <param name="name">The name of the attribute to get. May not be <c>null</c>.</param>
            <param name="def">The default value to return if not found.</param>
            <returns>The value of the attribute if found, the default value if not found.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.GetAttributeValue(System.String,System.Boolean)">
            <summary>
            Helper method to get the value of an attribute of this node. If the attribute is not found, the default value will be returned.
            </summary>
            <param name="name">The name of the attribute to get. May not be <c>null</c>.</param>
            <param name="def">The default value to return if not found.</param>
            <returns>The value of the attribute if found, the default value if not found.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.InsertAfter(JetyDu.HttpParse.HtmlNode,JetyDu.HttpParse.HtmlNode)">
            <summary>
            Inserts the specified node immediately after the specified reference node.
            </summary>
            <param name="newChild">The node to insert. May not be <c>null</c>.</param>
            <param name="refChild">The node that is the reference node. The newNode is placed after the refNode.</param>
            <returns>The node being inserted.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.InsertBefore(JetyDu.HttpParse.HtmlNode,JetyDu.HttpParse.HtmlNode)">
            <summary>
            Inserts the specified node immediately before the specified reference node.
            </summary>
            <param name="newChild">The node to insert. May not be <c>null</c>.</param>
            <param name="refChild">The node that is the reference node. The newChild is placed before this node.</param>
            <returns>The node being inserted.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.PrependChild(JetyDu.HttpParse.HtmlNode)">
            <summary>
            Adds the specified node to the beginning of the list of children of this node.
            </summary>
            <param name="newChild">The node to add. May not be <c>null</c>.</param>
            <returns>The node added.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.PrependChildren(JetyDu.HttpParse.HtmlNodeCollection)">
            <summary>
            Adds the specified node list to the beginning of the list of children of this node.
            </summary>
            <param name="newChildren">The node list to add. May not be <c>null</c>.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.Remove">
            <summary>
            Removes node from parent collection
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.RemoveAll">
            <summary>
            Removes all the children and/or attributes of the current node.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.RemoveAllChildren">
            <summary>
            Removes all the children of the current node.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.RemoveAllIDforNode(JetyDu.HttpParse.HtmlNode)">
            <summary>Removes all id for node described by node.</summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.RemoveChild(JetyDu.HttpParse.HtmlNode)">
            <summary>
            Removes the specified child node.
            </summary>
            <param name="oldChild">The node being removed. May not be <c>null</c>.</param>
            <returns>The node removed.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.RemoveChild(JetyDu.HttpParse.HtmlNode,System.Boolean)">
            <summary>
            Removes the specified child node.
            </summary>
            <param name="oldChild">The node being removed. May not be <c>null</c>.</param>
            <param name="keepGrandChildren">true to keep grand children of the node, false otherwise.</param>
            <returns>The node removed.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.ReplaceChild(JetyDu.HttpParse.HtmlNode,JetyDu.HttpParse.HtmlNode)">
            <summary>
            Replaces the child node oldChild with newChild node.
            </summary>
            <param name="newChild">The new node to put in the child list.</param>
            <param name="oldChild">The node being replaced in the list.</param>
            <returns>The node replaced.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.SetAttributeValue(System.String,System.String)">
            <summary>
            Helper method to set the value of an attribute of this node. If the attribute is not found, it will be created automatically.
            </summary>
            <param name="name">The name of the attribute to set. May not be null.</param>
            <param name="value">The value for the attribute.</param>
            <returns>The corresponding attribute instance.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.WriteContentTo(System.IO.TextWriter,System.Int32)">
            <summary>
            Saves all the children of the node to the specified TextWriter.
            </summary>
            <param name="outText">The TextWriter to which you want to save.</param>
            <param name="level">Identifies the level we are in starting at root with 0</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.WriteContentTo">
            <summary>
            Saves all the children of the node to a string.
            </summary>
            <returns>The saved string.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.WriteTo(System.IO.TextWriter,System.Int32)">
            <summary>
            Saves the current node to the specified TextWriter.
            </summary>
            <param name="outText">The TextWriter to which you want to save.</param>
            <param name="level">identifies the level we are in starting at root with 0</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.WriteTo(System.Xml.XmlWriter)">
            <summary>
            Saves the current node to the specified XmlWriter.
            </summary>
            <param name="writer">The XmlWriter to which you want to save.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.WriteTo">
            <summary>
            Saves the current node to a string.
            </summary>
            <returns>The saved string.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.AddClass(System.String)">
            <summary>
            Adds one or more classes to this node.
            </summary>
            <param name="name">The node list to add. May not be null.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.AddClass(System.String,System.Boolean)">
            <summary>
            Adds one or more classes to this node.
            </summary>
            <param name="name">The node list to add. May not be null.</param>
            <param name="throwError">true to throw Error if class name exists, false otherwise.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.RemoveClass">
            <summary>
            Removes the class attribute from the node.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.RemoveClass(System.Boolean)">
            <summary>
            Removes the class attribute from the node.
            </summary>
            <param name="throwError">true to throw Error if class name doesn't exist, false otherwise.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.RemoveClass(System.String)">
            <summary>
            Removes the specified class from the node.
            </summary>
            <param name="name">The class being removed. May not be <c>null</c>.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.RemoveClass(System.String,System.Boolean)">
            <summary>
            Removes the specified class from the node.
            </summary>
            <param name="name">The class being removed. May not be <c>null</c>.</param>
            <param name="throwError">true to throw Error if class name doesn't exist, false otherwise.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.ReplaceClass(System.String,System.String)">
            <summary>
            Replaces the class name oldClass with newClass name.
            </summary>
            <param name="newClass">The new class name.</param>
            <param name="oldClass">The class being replaced.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.ReplaceClass(System.String,System.String,System.Boolean)">
            <summary>
            Replaces the class name oldClass with newClass name.
            </summary>
            <param name="newClass">The new class name.</param>
            <param name="oldClass">The class being replaced.</param>
            <param name="throwError">true to throw Error if class name doesn't exist, false otherwise.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.GetClasses">
            <summary>Gets the CSS Class from the node.</summary>
            <returns>
                The CSS Class from the node
            </returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.HasClass(System.String)">
            <summary>Check if the node class has the parameter class.</summary>
            <param name="class">The class.</param>
            <returns>True if node class has the parameter class, false if not.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.GetEncapsulatedData``1(JetyDu.HttpParse.HtmlDocument)">
            <summary>
            Fill an object and go through it's properties and fill them too.
            </summary>
            <typeparam name="T">Type of object to want to fill. It should have atleast one property that defined XPath.</typeparam>
            <param name="htmlDocument">If htmlDocument includes data , leave this parameter null. Else pass your specific htmldocument.</param>
            <returns>Returns an object of type T including Encapsulated data.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.GetEncapsulatedData(System.Type,JetyDu.HttpParse.HtmlDocument)">
            <summary>
            Fill an object and go through it's properties and fill them too.
            </summary>
            <param name="targetType">Type of object to want to fill. It should have atleast one property that defined XPath.</param>
            <param name="htmlDocument">If htmlDocument includes data , leave this parameter null. Else pass your specific htmldocument.</param>
            <returns>Returns an object of type targetType including Encapsulated data.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.CreateNavigator">
            <summary>
            Creates a new XPathNavigator object for navigating this HTML node.
            </summary>
            <returns>An XPathNavigator object. The XPathNavigator is positioned on the node from which the method was called. It is not positioned on the root of the document.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.CreateRootNavigator">
            <summary>
            Creates an XPathNavigator using the root of this document.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.SelectNodes(System.String)">
            <summary>
            Selects a list of nodes matching the <see cref="P:JetyDu.HttpParse.HtmlNode.XPath"/> expression.
            </summary>
            <param name="xpath">The XPath expression.</param>
            <returns>An <see cref="T:JetyDu.HttpParse.HtmlNodeCollection"/> containing a collection of nodes matching the <see cref="P:JetyDu.HttpParse.HtmlNode.XPath"/> query, or <c>null</c> if no node matched the XPath expression.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.SelectNodes(System.Xml.XPath.XPathExpression)">
            <summary>
            Selects a list of nodes matching the <see cref="P:JetyDu.HttpParse.HtmlNode.XPath"/> expression.
            </summary>
            <param name="xpath">The XPath expression.</param>
            <returns>An <see cref="T:JetyDu.HttpParse.HtmlNodeCollection"/> containing a collection of nodes matching the <see cref="P:JetyDu.HttpParse.HtmlNode.XPath"/> query, or <c>null</c> if no node matched the XPath expression.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.SelectSingleNode(System.String)">
            <summary>
            Selects the first XmlNode that matches the XPath expression.
            </summary>
            <param name="xpath">The XPath expression. May not be null.</param>
            <returns>The first <see cref="T:JetyDu.HttpParse.HtmlNode"/> that matches the XPath query or a null reference if no matching node was found.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNode.SelectSingleNode(System.Xml.XPath.XPathExpression)">
            <summary>
            Selects a list of nodes matching the <see cref="P:JetyDu.HttpParse.HtmlNode.XPath"/> expression.
            </summary>
            <param name="xpath">The XPath expression.</param>
            <returns>An <see cref="T:JetyDu.HttpParse.HtmlNodeCollection"/> containing a collection of nodes matching the <see cref="P:JetyDu.HttpParse.HtmlNode.XPath"/> query, or <c>null</c> if no node matched the XPath expression.</returns>
        </member>
        <member name="T:JetyDu.HttpParse.Tools">
            <summary>
            Includes tools that GetEncapsulatedData method uses them.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.Tools.IsDefinedAttribute(System.Type,System.Type)">
            <summary>
            Determine if a type define an attribute or not , supporting both .NetStandard and .NetFramework2.0
            </summary>
            <param name="type">Type you want to test it.</param>
            <param name="attributeType">Attribute that type must have or not.</param>
            <returns>If true , The type parameter define attributeType parameter.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Tools.GetPropertiesDefinedXPath(System.Type)">
            <summary>
            Retrive properties of type that defined <see cref="T:JetyDu.HttpParse.XPathAttribute"/>.
            </summary>
            <param name="type">Type that you want to find it's XPath-Defined properties.</param>
            <returns>IEnumerable of property infos of a type , that defined specific attribute.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Tools.IsIEnumerable(System.Reflection.PropertyInfo)">
            <summary>
            Determine if a <see cref="T:System.Reflection.PropertyInfo"/> has implemented <see cref="T:System.Collections.IEnumerable"/> BUT <see cref="T:System.String"/> is considered as NONE-IEnumerable !
            </summary>
            <param name="propertyInfo">The property info you want to test.</param>
            <returns>True if property info is IEnumerable.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Tools.GetGenericTypes(System.Reflection.PropertyInfo)">
            <summary>
            Returns T type(first generic type) of <see cref="T:System.Collections.Generic.IEnumerable`1"/> or <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <param name="propertyInfo">IEnumerable-Implemented property</param>
            <returns>List of generic types.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Tools.GetMethodByItsName(System.Type,System.String)">
            <summary>
            Find and Return a mehtod that defined in a class by it's name.
            </summary>
            <param name="type">Type of class include requested method.</param>
            <param name="methodName">Name of requested method as string.</param>
            <returns>Method info of requested method.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Tools.CreateIListOfType(System.Type)">
            <summary>
            Create <see cref="T:System.Collections.IList"/> of given type.
            </summary>
            <param name="type">Type that you want to make a List of it.</param>
            <returns>Returns IList of given type.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Tools.GetNodeValueBasedOnXPathReturnType``1(JetyDu.HttpParse.HtmlNode,JetyDu.HttpParse.XPathAttribute)">
            <summary>
            Returns the part of value of <see cref="T:JetyDu.HttpParse.HtmlNode"/> you want as .
            </summary>
            <param name="htmlNode">A htmlNode instance.</param>
            <param name="xPathAttribute">Attribute that includes ReturnType</param>
            <returns>String that choosen from HtmlNode as result.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Tools.GetNodesValuesBasedOnXPathReturnType(JetyDu.HttpParse.HtmlNodeCollection,JetyDu.HttpParse.XPathAttribute,System.Type)">
            <summary>
            Returns parts of values of <see cref="T:JetyDu.HttpParse.HtmlNode"/> you want as <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="htmlNodeCollection"><see cref="T:JetyDu.HttpParse.HtmlNodeCollection"/> that you want to retrive each <see cref="T:JetyDu.HttpParse.HtmlNode"/> value.</param>
            <param name="xPathAttribute">A <see cref="T:JetyDu.HttpParse.XPathAttribute"/> instnce incules <see cref="T:JetyDu.HttpParse.ReturnType"/>.</param>
            <param name="listGenericType">Type of IList generic you want.</param>
            <returns></returns>
        </member>
        <member name="T:JetyDu.HttpParse.Tools.HAPFunc`2">
            <summary>
            Simulate Func method to use in Lambada Expression.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.Tools.HAPWhere``1(System.Collections.Generic.IEnumerable{``0},JetyDu.HttpParse.Tools.HAPFunc{``0,System.Boolean})">
            <summary>
            This method works like Where method in LINQ.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.Tools.IsInstantiable(System.Type)">
            <summary>
            Check if the type can instantiated.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.Tools.CountOfIEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns count of elements stored in IEnumerable of T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:JetyDu.HttpParse.ReturnType">
            <summary>
            Specify which part of <see cref="T:JetyDu.HttpParse.HtmlNode"/> is requested.
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.HasXPathAttribute">
            <summary>
            Just mark and flag classes to show they have properties that defined <see cref="T:JetyDu.HttpParse.XPathAttribute"/>.
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.XPathAttribute">
            <summary>
            Includes XPath and <see cref="P:JetyDu.HttpParse.XPathAttribute.NodeReturnType"/>. XPath for finding html tags and <see cref="P:JetyDu.HttpParse.XPathAttribute.NodeReturnType"/> for specify which part of <see cref="T:JetyDu.HttpParse.HtmlNode"/> you want to return.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.XPathAttribute.#ctor(System.String,JetyDu.HttpParse.ReturnType)">
            <summary>
            
            </summary>
            <param name="xpathString"></param>
            <param name="nodeReturnType"></param>
        </member>
        <member name="M:JetyDu.HttpParse.XPathAttribute.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="xpathString"></param>
            <param name="attributeName"></param>
        </member>
        <member name="T:JetyDu.HttpParse.NodeNotFoundException">
            <summary>
            
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.NodeAttributeNotFoundException">
            <summary>
            
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.MissingXPathException">
            <summary>
            
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.HtmlNodeCollection">
            <summary>
            Represents a combined list and collection of HTML nodes.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeCollection.#ctor(JetyDu.HttpParse.HtmlNode)">
            <summary>
            Initialize the HtmlNodeCollection with the base parent node
            </summary>
            <param name="parentnode">The base node of the collection</param>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlNodeCollection.Item(JetyDu.HttpParse.HtmlNode)">
            <summary>
            Gets a given node from the list.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlNodeCollection.Item(System.String)">
            <summary>
            Get node with tag name
            </summary>
            <param name="nodeName"></param>
            <returns></returns>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlNodeCollection.Count">
            <summary>
            Gets the number of elements actually contained in the list.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlNodeCollection.IsReadOnly">
            <summary>
            Is collection read only
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlNodeCollection.Item(System.Int32)">
            <summary>
            Gets the node at the specified index.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeCollection.Add(JetyDu.HttpParse.HtmlNode)">
            <summary>
            Add node to the collection
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeCollection.Add(JetyDu.HttpParse.HtmlNode,System.Boolean)">
            <summary>
            Add node to the collection
            </summary>
            <param name="node"></param>
            <param name="setParent"></param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeCollection.Clear">
            <summary>
            Clears out the collection of HtmlNodes. Removes each nodes reference to parentnode, nextnode and prevnode
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeCollection.Contains(JetyDu.HttpParse.HtmlNode)">
            <summary>
            Gets existence of node in collection
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeCollection.CopyTo(JetyDu.HttpParse.HtmlNode[],System.Int32)">
            <summary>
            Copy collection to array
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeCollection.System#Collections#Generic#IEnumerable{JetyDu#HttpParse#HtmlNode}#GetEnumerator">
            <summary>
            Get Enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get Explicit Enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeCollection.IndexOf(JetyDu.HttpParse.HtmlNode)">
            <summary>
            Get index of node
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeCollection.Insert(System.Int32,JetyDu.HttpParse.HtmlNode)">
            <summary>
            Insert node at index
            </summary>
            <param name="index"></param>
            <param name="node"></param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeCollection.Remove(JetyDu.HttpParse.HtmlNode)">
            <summary>
            Remove node
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeCollection.RemoveAt(System.Int32)">
            <summary>
            Remove <see cref="T:JetyDu.HttpParse.HtmlNode"/> at index
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeCollection.FindFirst(JetyDu.HttpParse.HtmlNodeCollection,System.String)">
            <summary>
            Get first instance of node in supplied collection
            </summary>
            <param name="items"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeCollection.Append(JetyDu.HttpParse.HtmlNode)">
            <summary>
            Add node to the end of the collection
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeCollection.FindFirst(System.String)">
            <summary>
            Get first instance of node with name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeCollection.GetNodeIndex(JetyDu.HttpParse.HtmlNode)">
            <summary>
            Get index of node
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeCollection.Prepend(JetyDu.HttpParse.HtmlNode)">
            <summary>
            Add node to the beginning of the collection
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeCollection.Remove(System.Int32)">
            <summary>
            Remove node at index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeCollection.Replace(System.Int32,JetyDu.HttpParse.HtmlNode)">
            <summary>
            Replace node at index
            </summary>
            <param name="index"></param>
            <param name="node"></param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeCollection.Descendants">
            <summary>
            Get all node descended from this collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeCollection.Descendants(System.String)">
            <summary>
            Get all node descended from this collection with matching name
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeCollection.Elements">
            <summary>
            Gets all first generation elements in collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeCollection.Elements(System.String)">
            <summary>
            Gets all first generation elements matching name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeCollection.Nodes">
            <summary>
            All first generation nodes in collection
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetyDu.HttpParse.HtmlNodeNavigator">
            <summary>
            Represents an HTML navigator on an HTML document seen as a data store.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeNavigator.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the HtmlNavigator and loads an HTML document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeNavigator.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the HtmlNavigator and loads an HTML document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the stream.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeNavigator.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the HtmlNavigator and loads an HTML document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeNavigator.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Initializes a new instance of the HtmlNavigator and loads an HTML document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the stream.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeNavigator.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the HtmlNavigator and loads an HTML document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the stream.</param>
            <param name="buffersize">The minimum buffer size.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeNavigator.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the HtmlNavigator and loads an HTML document from a TextReader.
            </summary>
            <param name="reader">The TextReader used to feed the HTML data into the document.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeNavigator.#ctor(System.String)">
            <summary>
            Initializes a new instance of the HtmlNavigator and loads an HTML document from a file.
            </summary>
            <param name="path">The complete file path to be read.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeNavigator.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the HtmlNavigator and loads an HTML document from a file.
            </summary>
            <param name="path">The complete file path to be read.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeNavigator.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the HtmlNavigator and loads an HTML document from a file.
            </summary>
            <param name="path">The complete file path to be read.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeNavigator.#ctor(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Initializes a new instance of the HtmlNavigator and loads an HTML document from a file.
            </summary>
            <param name="path">The complete file path to be read.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeNavigator.#ctor(System.String,System.Text.Encoding,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the HtmlNavigator and loads an HTML document from a file.
            </summary>
            <param name="path">The complete file path to be read.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
            <param name="buffersize">The minimum buffer size.</param>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlNodeNavigator.BaseURI">
            <summary>
            Gets the base URI for the current node.
            Always returns string.Empty in the case of HtmlNavigator implementation.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlNodeNavigator.CurrentDocument">
            <summary>
            Gets the current HTML document.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlNodeNavigator.CurrentNode">
            <summary>
            Gets the current HTML node.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlNodeNavigator.HasAttributes">
            <summary>
            Gets a value indicating whether the current node has child nodes.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlNodeNavigator.HasChildren">
            <summary>
            Gets a value indicating whether the current node has child nodes.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlNodeNavigator.IsEmptyElement">
            <summary>
            Gets a value indicating whether the current node is an empty element.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlNodeNavigator.LocalName">
            <summary>
            Gets the name of the current HTML node without the namespace prefix.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlNodeNavigator.Name">
            <summary>
            Gets the qualified name of the current node.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlNodeNavigator.NamespaceURI">
            <summary>
            Gets the namespace URI (as defined in the W3C Namespace Specification) of the current node.
            Always returns string.Empty in the case of HtmlNavigator implementation.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlNodeNavigator.NameTable">
            <summary>
            Gets the <see cref="T:System.Xml.XmlNameTable"/> associated with this implementation.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlNodeNavigator.NodeType">
            <summary>
            Gets the type of the current node.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlNodeNavigator.Prefix">
            <summary>
            Gets the prefix associated with the current node.
            Always returns string.Empty in the case of HtmlNavigator implementation.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlNodeNavigator.Value">
            <summary>
            Gets the text value of the current node.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlNodeNavigator.XmlLang">
            <summary>
            Gets the xml:lang scope for the current node.
            Always returns string.Empty in the case of HtmlNavigator implementation.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeNavigator.Clone">
            <summary>
            Creates a new HtmlNavigator positioned at the same node as this HtmlNavigator.
            </summary>
            <returns>A new HtmlNavigator object positioned at the same node as the original HtmlNavigator.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeNavigator.GetAttribute(System.String,System.String)">
            <summary>
            Gets the value of the HTML attribute with the specified LocalName and NamespaceURI.
            </summary>
            <param name="localName">The local name of the HTML attribute.</param>
            <param name="namespaceURI">The namespace URI of the attribute. Unsupported with the HtmlNavigator implementation.</param>
            <returns>The value of the specified HTML attribute. String.Empty or null if a matching attribute is not found or if the navigator is not positioned on an element node.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeNavigator.GetNamespace(System.String)">
            <summary>
            Returns the value of the namespace node corresponding to the specified local name.
            Always returns string.Empty for the HtmlNavigator implementation.
            </summary>
            <param name="name">The local name of the namespace node.</param>
            <returns>Always returns string.Empty for the HtmlNavigator implementation.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeNavigator.IsSamePosition(System.Xml.XPath.XPathNavigator)">
            <summary>
            Determines whether the current HtmlNavigator is at the same position as the specified HtmlNavigator.
            </summary>
            <param name="other">The HtmlNavigator that you want to compare against.</param>
            <returns>true if the two navigators have the same position, otherwise, false.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeNavigator.MoveTo(System.Xml.XPath.XPathNavigator)">
            <summary>
            Moves to the same position as the specified HtmlNavigator.
            </summary>
            <param name="other">The HtmlNavigator positioned on the node that you want to move to.</param>
            <returns>true if successful, otherwise false. If false, the position of the navigator is unchanged.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeNavigator.MoveToAttribute(System.String,System.String)">
            <summary>
            Moves to the HTML attribute with matching LocalName and NamespaceURI.
            </summary>
            <param name="localName">The local name of the HTML attribute.</param>
            <param name="namespaceURI">The namespace URI of the attribute. Unsupported with the HtmlNavigator implementation.</param>
            <returns>true if the HTML attribute is found, otherwise, false. If false, the position of the navigator does not change.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeNavigator.MoveToFirst">
            <summary>
            Moves to the first sibling of the current node.
            </summary>
            <returns>true if the navigator is successful moving to the first sibling node, false if there is no first sibling or if the navigator is currently positioned on an attribute node.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeNavigator.MoveToFirstAttribute">
            <summary>
            Moves to the first HTML attribute.
            </summary>
            <returns>true if the navigator is successful moving to the first HTML attribute, otherwise, false.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeNavigator.MoveToFirstChild">
            <summary>
            Moves to the first child of the current node.
            </summary>
            <returns>true if there is a first child node, otherwise false.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeNavigator.MoveToFirstNamespace(System.Xml.XPath.XPathNamespaceScope)">
            <summary>
            Moves the XPathNavigator to the first namespace node of the current element.
            Always returns false for the HtmlNavigator implementation.
            </summary>
            <param name="scope">An XPathNamespaceScope value describing the namespace scope.</param>
            <returns>Always returns false for the HtmlNavigator implementation.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeNavigator.MoveToId(System.String)">
            <summary>
            Moves to the node that has an attribute of type ID whose value matches the specified string.
            </summary>
            <param name="id">A string representing the ID value of the node to which you want to move. This argument does not need to be atomized.</param>
            <returns>true if the move was successful, otherwise false. If false, the position of the navigator is unchanged.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeNavigator.MoveToNamespace(System.String)">
            <summary>
            Moves the XPathNavigator to the namespace node with the specified local name. 
            Always returns false for the HtmlNavigator implementation.
            </summary>
            <param name="name">The local name of the namespace node.</param>
            <returns>Always returns false for the HtmlNavigator implementation.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeNavigator.MoveToNext">
            <summary>
            Moves to the next sibling of the current node.
            </summary>
            <returns>true if the navigator is successful moving to the next sibling node, false if there are no more siblings or if the navigator is currently positioned on an attribute node. If false, the position of the navigator is unchanged.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeNavigator.MoveToNextAttribute">
            <summary>
            Moves to the next HTML attribute.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeNavigator.MoveToNextNamespace(System.Xml.XPath.XPathNamespaceScope)">
            <summary>
            Moves the XPathNavigator to the next namespace node.
            Always returns falsefor the HtmlNavigator implementation.
            </summary>
            <param name="scope">An XPathNamespaceScope value describing the namespace scope.</param>
            <returns>Always returns false for the HtmlNavigator implementation.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeNavigator.MoveToParent">
            <summary>
            Moves to the parent of the current node.
            </summary>
            <returns>true if there is a parent node, otherwise false.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeNavigator.MoveToPrevious">
            <summary>
            Moves to the previous sibling of the current node.
            </summary>
            <returns>true if the navigator is successful moving to the previous sibling node, false if there is no previous sibling or if the navigator is currently positioned on an attribute node.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlNodeNavigator.MoveToRoot">
            <summary>
            Moves to the root node to which the current node belongs.
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.HtmlNodeType">
            <summary>
            Represents the type of a node.
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.HtmlNodeType.Document">
            <summary>
            The root of a document.
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.HtmlNodeType.Element">
            <summary>
            An HTML element.
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.HtmlNodeType.Comment">
            <summary>
            An HTML comment.
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.HtmlNodeType.Text">
            <summary>
            A text node is always the child of an element or a document node.
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.HtmlParseError">
            <summary>
            Represents a parsing error found during document parsing.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlParseError.Code">
            <summary>
            Gets the type of error.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlParseError.Line">
            <summary>
            Gets the line number of this error in the document.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlParseError.LinePosition">
            <summary>
            Gets the column number of this error in the document.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlParseError.Reason">
            <summary>
            Gets a description for the error.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlParseError.SourceText">
            <summary>
            Gets the the full text of the line containing the error.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlParseError.StreamPosition">
            <summary>
            Gets the absolute stream position of this error in the document, relative to the start of the document.
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.HtmlParseErrorCode">
            <summary>
            Represents the type of parsing error.
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.HtmlParseErrorCode.TagNotClosed">
            <summary>
            A tag was not closed.
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.HtmlParseErrorCode.TagNotOpened">
            <summary>
            A tag was not opened.
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.HtmlParseErrorCode.CharsetMismatch">
            <summary>
            There is a charset mismatch between stream and declared (META) encoding.
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.HtmlParseErrorCode.EndTagNotRequired">
            <summary>
            An end tag was not required.
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.HtmlParseErrorCode.EndTagInvalidHere">
            <summary>
            An end tag is invalid at this position.
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.HtmlTextNode">
            <summary>
            Represents an HTML text node.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlTextNode.InnerHtml">
            <summary>
            Gets or Sets the HTML between the start and end tags of the object. In the case of a text node, it is equals to OuterHtml.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlTextNode.OuterHtml">
            <summary>
            Gets or Sets the object and its content in HTML.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlTextNode.Text">
            <summary>
            Gets or Sets the text of the node.
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.HtmlWeb">
            <summary>
            A utility class to get HTML document from HTTP.
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.HtmlWeb.PostResponseHandler">
            <summary>
            Represents the method that will handle the PostResponse event.
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.HtmlWeb.PreHandleDocumentHandler">
            <summary>
            Represents the method that will handle the PreHandleDocument event.
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.HtmlWeb.PreRequestHandler">
            <summary>
            Represents the method that will handle the PreRequest event.
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.HtmlWeb.PostResponse">
            <summary>
            Occurs after an HTTP request has been executed.
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.HtmlWeb.PreHandleDocument">
            <summary>
            Occurs before an HTML document is handled.
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.HtmlWeb.PreRequest">
            <summary>
            Occurs before an HTTP request is executed.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlWeb.AutoDetectEncoding">
            <summary>
            Gets or Sets a value indicating if document encoding must be automatically detected.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlWeb.OverrideEncoding">
            <summary>
            Gets or sets the Encoding used to override the response stream from any web request
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlWeb.CacheOnly">
            <summary>
            Gets or Sets a value indicating whether to get document only from the cache.
            If this is set to true and document is not found in the cache, nothing will be loaded.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlWeb.UsingCacheIfExists">
            <summary>
            Gets or Sets a value indicating whether to get document from the cache if exists, otherwise from the web
            A value indicating whether to get document from the cache if exists, otherwise from the web
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlWeb.CachePath">
            <summary>
            Gets or Sets the cache path. If null, no caching mechanism will be used.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlWeb.FromCache">
            <summary>
            Gets a value indicating if the last document was retrieved from the cache.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlWeb.RequestDuration">
            <summary>
            Gets the last request duration in milliseconds.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlWeb.ResponseUri">
            <summary>
            Gets the URI of the Internet resource that actually responded to the request.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlWeb.StatusCode">
            <summary>
            Gets the last request status.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlWeb.StreamBufferSize">
            <summary>
            Gets or Sets the size of the buffer used for memory operations.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlWeb.UseCookies">
            <summary>
            Gets or Sets a value indicating if cookies will be stored.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlWeb.CaptureRedirect">
            <summary>Gets or sets a value indicating whether redirect should be captured instead of the current location.</summary>
            <value>True if capture redirect, false if not.</value>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlWeb.UserAgent">
            <summary>
            Gets or Sets the User Agent HTTP 1.1 header sent on any webrequest
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HtmlWeb.UsingCache">
            <summary>
            Gets or Sets a value indicating whether the caching mechanisms should be used or not.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlWeb.GetContentTypeForExtension(System.String,System.String)">
            <summary>
            Gets the MIME content type for a given path extension.
            </summary>
            <param name="extension">The input path extension.</param>
            <param name="def">The default content type to return if any error occurs.</param>
            <returns>The path extension's MIME content type.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlWeb.GetExtensionForContentType(System.String,System.String)">
            <summary>
            Gets the path extension for a given MIME content type.
            </summary>
            <param name="contentType">The input MIME content type.</param>
            <param name="def">The default path extension to return if any error occurs.</param>
            <returns>The MIME content type's path extension.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlWeb.CreateInstance(System.String,System.Type)">
            <summary>
            Creates an instance of the given type from the specified Internet resource.
            </summary>
            <param name="url">The requested URL, such as "http://Myserver/Mypath/Myfile.asp".</param>
            <param name="type">The requested type.</param>
            <returns>An newly created instance.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlWeb.Get(System.String,System.String)">
            <summary>
            Gets an HTML document from an Internet resource and saves it to the specified file.
            </summary>
            <param name="url">The requested URL, such as "http://Myserver/Mypath/Myfile.asp".</param>
            <param name="path">The location of the file where you want to save the document.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlWeb.Get(System.String,System.String,System.Net.WebProxy,System.Net.NetworkCredential)">
            <summary>
            Gets an HTML document from an Internet resource and saves it to the specified file. - Proxy aware
            </summary>
            <param name="url">The requested URL, such as "http://Myserver/Mypath/Myfile.asp".</param>
            <param name="path">The location of the file where you want to save the document.</param>
            <param name="proxy"></param>
            <param name="credentials"></param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlWeb.Get(System.String,System.String,System.String)">
            <summary>
            Gets an HTML document from an Internet resource and saves it to the specified file.
            </summary>
            <param name="url">The requested URL, such as "http://Myserver/Mypath/Myfile.asp".</param>
            <param name="path">The location of the file where you want to save the document.</param>
            <param name="method">The HTTP method used to open the connection, such as GET, POST, PUT, or PROPFIND.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlWeb.Get(System.String,System.String,System.Net.WebProxy,System.Net.NetworkCredential,System.String)">
            <summary>
            Gets an HTML document from an Internet resource and saves it to the specified file.  Understands Proxies
            </summary>
            <param name="url">The requested URL, such as "http://Myserver/Mypath/Myfile.asp".</param>
            <param name="path">The location of the file where you want to save the document.</param>
            <param name="credentials"></param>
            <param name="method">The HTTP method used to open the connection, such as GET, POST, PUT, or PROPFIND.</param>
            <param name="proxy"></param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlWeb.GetCachePath(System.Uri)">
            <summary>
            Gets the cache file path for a specified url.
            </summary>
            <param name="uri">The url fo which to retrieve the cache path. May not be null.</param>
            <returns>The cache file path.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlWeb.Load(System.String)">
            <summary>
            Gets an HTML document from an Internet resource.
            </summary>
            <param name="url">The requested URL, such as "http://Myserver/Mypath/Myfile.asp".</param>
            <returns>A new HTML document.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlWeb.Load(System.Uri)">
            <summary>
            Gets an HTML document from an Internet resource.
            </summary>
            <param name="uri">The requested Uri, such as new Uri("http://Myserver/Mypath/Myfile.asp").</param>
            <returns>A new HTML document.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlWeb.Load(System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            Gets an HTML document from an Internet resource.
            </summary>
            <param name="url">The requested URL, such as "http://Myserver/Mypath/Myfile.asp".</param>
            <param name="proxyHost">Host to use for Proxy</param>
            <param name="proxyPort">Port the Proxy is on</param>
            <param name="userId">User Id for Authentication</param>
            <param name="password">Password for Authentication</param>
            <returns>A new HTML document.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlWeb.Load(System.Uri,System.String,System.Int32,System.String,System.String)">
            <summary>
            Gets an HTML document from an Internet resource.
            </summary>
            <param name="uri">The requested Uri, such as new Uri("http://Myserver/Mypath/Myfile.asp").</param>
            <param name="proxyHost">Host to use for Proxy</param>
            <param name="proxyPort">Port the Proxy is on</param>
            <param name="userId">User Id for Authentication</param>
            <param name="password">Password for Authentication</param>
            <returns>A new HTML document.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlWeb.Load(System.String,System.String)">
            <summary>
            Loads an HTML document from an Internet resource.
            </summary>
            <param name="url">The requested URL, such as "http://Myserver/Mypath/Myfile.asp".</param>
            <param name="method">The HTTP method used to open the connection, such as GET, POST, PUT, or PROPFIND.</param>
            <returns>A new HTML document.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlWeb.Load(System.Uri,System.String)">
            <summary>
            Loads an HTML document from an Internet resource.
            </summary>
            <param name="uri">The requested URL, such as new Uri("http://Myserver/Mypath/Myfile.asp").</param>
            <param name="method">The HTTP method used to open the connection, such as GET, POST, PUT, or PROPFIND.</param>
            <returns>A new HTML document.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlWeb.Load(System.String,System.String,System.Net.WebProxy,System.Net.NetworkCredential)">
            <summary>
            Loads an HTML document from an Internet resource.
            </summary>
            <param name="url">The requested URL, such as "http://Myserver/Mypath/Myfile.asp".</param>
            <param name="method">The HTTP method used to open the connection, such as GET, POST, PUT, or PROPFIND.</param>
            <param name="proxy">Proxy to use with this request</param>
            <param name="credentials">Credentials to use when authenticating</param>
            <returns>A new HTML document.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlWeb.Load(System.Uri,System.String,System.Net.WebProxy,System.Net.NetworkCredential)">
            <summary>
            Loads an HTML document from an Internet resource.
            </summary>
            <param name="uri">The requested Uri, such as new Uri("http://Myserver/Mypath/Myfile.asp").</param>
            <param name="method">The HTTP method used to open the connection, such as GET, POST, PUT, or PROPFIND.</param>
            <param name="proxy">Proxy to use with this request</param>
            <param name="credentials">Credentials to use when authenticating</param>
            <returns>A new HTML document.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlWeb.LoadHtmlAsXml(System.String,System.Xml.XmlTextWriter)">
            <summary>
            Loads an HTML document from an Internet resource and saves it to the specified XmlTextWriter.
            </summary>
            <param name="htmlUrl">The requested URL, such as "http://Myserver/Mypath/Myfile.asp".</param>
            <param name="writer">The XmlTextWriter to which you want to save to.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlWeb.LoadFromWebAsync(System.String)">
            <summary>
            Begins the process of downloading an internet resource
            </summary>
            <param name="url">Url to the html document</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlWeb.LoadFromWebAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Begins the process of downloading an internet resource
            </summary>
            <param name="url">Url to the html document</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlWeb.LoadFromWebAsync(System.String,System.Text.Encoding)">
            <summary>
            Begins the process of downloading an internet resource
            </summary>
            <param name="url">Url to the html document</param>
            <param name="encoding">The encoding to use while downloading the document</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlWeb.LoadFromWebAsync(System.String,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Begins the process of downloading an internet resource
            </summary>
            <param name="url">Url to the html document</param>
            <param name="encoding">The encoding to use while downloading the document</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlWeb.LoadFromWebAsync(System.String,System.Text.Encoding,System.String,System.String)">
            <summary>
            Begins the process of downloading an internet resource
            </summary>
            <param name="url">Url to the html document</param>
            <param name="encoding">The encoding to use while downloading the document</param>
            <param name="userName">Username to use for credentials in the web request</param>
            <param name="password">Password to use for credentials in the web request</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlWeb.LoadFromWebAsync(System.String,System.Text.Encoding,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Begins the process of downloading an internet resource
            </summary>
            <param name="url">Url to the html document</param>
            <param name="encoding">The encoding to use while downloading the document</param>
            <param name="userName">Username to use for credentials in the web request</param>
            <param name="password">Password to use for credentials in the web request</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlWeb.LoadFromWebAsync(System.String,System.Text.Encoding,System.String,System.String,System.String)">
            <summary>
            Begins the process of downloading an internet resource
            </summary>
            <param name="url">Url to the html document</param>
            <param name="encoding">The encoding to use while downloading the document</param>
            <param name="userName">Username to use for credentials in the web request</param>
            <param name="password">Password to use for credentials in the web request</param>
            <param name="domain">Domain to use for credentials in the web request</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlWeb.LoadFromWebAsync(System.String,System.Text.Encoding,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Begins the process of downloading an internet resource
            </summary>
            <param name="url">Url to the html document</param>
            <param name="encoding">The encoding to use while downloading the document</param>
            <param name="userName">Username to use for credentials in the web request</param>
            <param name="password">Password to use for credentials in the web request</param>
            <param name="domain">Domain to use for credentials in the web request</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlWeb.LoadFromWebAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Begins the process of downloading an internet resource
            </summary>
            <param name="url">Url to the html document</param>
            <param name="userName">Username to use for credentials in the web request</param>
            <param name="password">Password to use for credentials in the web request</param>
            <param name="domain">Domain to use for credentials in the web request</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlWeb.LoadFromWebAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Begins the process of downloading an internet resource
            </summary>
            <param name="url">Url to the html document</param>
            <param name="userName">Username to use for credentials in the web request</param>
            <param name="password">Password to use for credentials in the web request</param>
            <param name="domain">Domain to use for credentials in the web request</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlWeb.LoadFromWebAsync(System.String,System.String,System.String)">
            <summary>
            Begins the process of downloading an internet resource
            </summary>
            <param name="url">Url to the html document</param>
            <param name="userName">Username to use for credentials in the web request</param>
            <param name="password">Password to use for credentials in the web request</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlWeb.LoadFromWebAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Begins the process of downloading an internet resource
            </summary>
            <param name="url">Url to the html document</param>
            <param name="userName">Username to use for credentials in the web request</param>
            <param name="password">Password to use for credentials in the web request</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlWeb.LoadFromWebAsync(System.String,System.Net.NetworkCredential)">
            <summary>
            Begins the process of downloading an internet resource
            </summary>
            <param name="url">Url to the html document</param>
            <param name="credentials">The credentials to use for authenticating the web request</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlWeb.LoadFromWebAsync(System.String,System.Net.NetworkCredential,System.Threading.CancellationToken)">
            <summary>
            Begins the process of downloading an internet resource
            </summary>
            <param name="url">Url to the html document</param>
            <param name="credentials">The credentials to use for authenticating the web request</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlWeb.LoadFromWebAsync(System.Uri,System.Text.Encoding,System.Net.NetworkCredential)">
            <summary>
            Begins the process of downloading an internet resource
            </summary>
            <param name="uri">Url to the html document</param>
            <param name="encoding">The encoding to use while downloading the document</param>
            <param name="credentials">The credentials to use for authenticating the web request</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlWeb.LoadFromWebAsync(System.Uri,System.Text.Encoding,System.Net.NetworkCredential,System.Threading.CancellationToken)">
            <summary>
            Begins the process of downloading an internet resource
            </summary>
            <param name="uri">Url to the html document</param>
            <param name="encoding">The encoding to use while downloading the document</param>
            <param name="credentials">The credentials to use for authenticating the web request</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlWeb.CreateInstance(System.String,System.String,System.Xml.Xsl.XsltArgumentList,System.Type)">
            <summary>
            Creates an instance of the given type from the specified Internet resource.
            </summary>
            <param name="htmlUrl">The requested URL, such as "http://Myserver/Mypath/Myfile.asp".</param>
            <param name="xsltUrl">The URL that specifies the XSLT stylesheet to load.</param>
            <param name="xsltArgs">An <see cref="T:System.Xml.Xsl.XsltArgumentList"/> containing the namespace-qualified arguments used as input to the transform.</param>
            <param name="type">The requested type.</param>
            <returns>An newly created instance.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlWeb.CreateInstance(System.String,System.String,System.Xml.Xsl.XsltArgumentList,System.Type,System.String)">
            <summary>
            Creates an instance of the given type from the specified Internet resource.
            </summary>
            <param name="htmlUrl">The requested URL, such as "http://Myserver/Mypath/Myfile.asp".</param>
            <param name="xsltUrl">The URL that specifies the XSLT stylesheet to load.</param>
            <param name="xsltArgs">An <see cref="T:System.Xml.Xsl.XsltArgumentList"/> containing the namespace-qualified arguments used as input to the transform.</param>
            <param name="type">The requested type.</param>
            <param name="xmlPath">A file path where the temporary XML before transformation will be saved. Mostly used for debugging purposes.</param>
            <returns>An newly created instance.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlWeb.LoadHtmlAsXml(System.String,System.String,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlTextWriter)">
            <summary>
            Loads an HTML document from an Internet resource and saves it to the specified XmlTextWriter, after an XSLT transformation.
            </summary>
            <param name="htmlUrl">The requested URL, such as "http://Myserver/Mypath/Myfile.asp".</param>
            <param name="xsltUrl">The URL that specifies the XSLT stylesheet to load.</param>
            <param name="xsltArgs">An XsltArgumentList containing the namespace-qualified arguments used as input to the transform.</param>
            <param name="writer">The XmlTextWriter to which you want to save.</param>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlWeb.LoadHtmlAsXml(System.String,System.String,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlTextWriter,System.String)">
            <summary>
            Loads an HTML document from an Internet resource and saves it to the specified XmlTextWriter, after an XSLT transformation.
            </summary>
            <param name="htmlUrl">The requested URL, such as "http://Myserver/Mypath/Myfile.asp". May not be null.</param>
            <param name="xsltUrl">The URL that specifies the XSLT stylesheet to load.</param>
            <param name="xsltArgs">An XsltArgumentList containing the namespace-qualified arguments used as input to the transform.</param>
            <param name="writer">The XmlTextWriter to which you want to save.</param>
            <param name="xmlPath">A file path where the temporary XML before transformation will be saved. Mostly used for debugging purposes.</param>
        </member>
        <member name="T:JetyDu.HttpParse.IPermissionHelper">
            <summary>
            An interface for getting permissions of the running application
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.IPermissionHelper.GetIsRegistryAvailable">
            <summary>
            Checks to see if Registry access is available to the caller
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.IPermissionHelper.GetIsDnsAvailable">
            <summary>
            Checks to see if DNS information is available to the caller
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetyDu.HttpParse.HtmlWebException">
            <summary>
            Represents an exception thrown by the HtmlWeb utility class.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.HtmlWebException.#ctor(System.String)">
            <summary>
            Creates an instance of the HtmlWebException.
            </summary>
            <param name="message">The exception's message.</param>
        </member>
        <member name="T:JetyDu.HttpParse.MixedCodeDocument">
            <summary>
            Represents a document with mixed code and text. ASP, ASPX, JSP, are good example of such documents.
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.MixedCodeDocument.TokenCodeEnd">
            <summary>
            Gets or sets the token representing code end.
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.MixedCodeDocument.TokenCodeStart">
            <summary>
            Gets or sets the token representing code start.
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.MixedCodeDocument.TokenDirective">
            <summary>
            Gets or sets the token representing code directive.
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.MixedCodeDocument.TokenResponseWrite">
            <summary>
            Gets or sets the token representing response write directive.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.MixedCodeDocument.#ctor">
            <summary>
            Creates a mixed code document instance.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.MixedCodeDocument.Code">
            <summary>
            Gets the code represented by the mixed code document seen as a template.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.MixedCodeDocument.CodeFragments">
            <summary>
            Gets the list of code fragments in the document.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.MixedCodeDocument.Fragments">
            <summary>
            Gets the list of all fragments in the document.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.MixedCodeDocument.StreamEncoding">
            <summary>
            Gets the encoding of the stream used to read the document.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.MixedCodeDocument.TextFragments">
            <summary>
            Gets the list of text fragments in the document.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.MixedCodeDocument.CreateCodeFragment">
            <summary>
            Create a code fragment instances.
            </summary>
            <returns>The newly created code fragment instance.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.MixedCodeDocument.CreateTextFragment">
            <summary>
            Create a text fragment instances.
            </summary>
            <returns>The newly created text fragment instance.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.MixedCodeDocument.Load(System.IO.Stream)">
            <summary>
            Loads a mixed code document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
        </member>
        <member name="M:JetyDu.HttpParse.MixedCodeDocument.Load(System.IO.Stream,System.Boolean)">
            <summary>
            Loads a mixed code document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
        </member>
        <member name="M:JetyDu.HttpParse.MixedCodeDocument.Load(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Loads a mixed code document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:JetyDu.HttpParse.MixedCodeDocument.Load(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Loads a mixed code document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
        </member>
        <member name="M:JetyDu.HttpParse.MixedCodeDocument.Load(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32)">
            <summary>
            Loads a mixed code document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
            <param name="buffersize">The minimum buffer size.</param>
        </member>
        <member name="M:JetyDu.HttpParse.MixedCodeDocument.Load(System.String)">
            <summary>
            Loads a mixed code document from a file.
            </summary>
            <param name="path">The complete file path to be read.</param>
        </member>
        <member name="M:JetyDu.HttpParse.MixedCodeDocument.Load(System.String,System.Boolean)">
            <summary>
            Loads a mixed code document from a file.
            </summary>
            <param name="path">The complete file path to be read.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
        </member>
        <member name="M:JetyDu.HttpParse.MixedCodeDocument.Load(System.String,System.Text.Encoding)">
            <summary>
            Loads a mixed code document from a file.
            </summary>
            <param name="path">The complete file path to be read.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:JetyDu.HttpParse.MixedCodeDocument.Load(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Loads a mixed code document from a file.
            </summary>
            <param name="path">The complete file path to be read.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
        </member>
        <member name="M:JetyDu.HttpParse.MixedCodeDocument.Load(System.String,System.Text.Encoding,System.Boolean,System.Int32)">
            <summary>
            Loads a mixed code document from a file.
            </summary>
            <param name="path">The complete file path to be read.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
            <param name="buffersize">The minimum buffer size.</param>
        </member>
        <member name="M:JetyDu.HttpParse.MixedCodeDocument.Load(System.IO.TextReader)">
            <summary>
            Loads the mixed code document from the specified TextReader.
            </summary>
            <param name="reader">The TextReader used to feed the HTML data into the document.</param>
        </member>
        <member name="M:JetyDu.HttpParse.MixedCodeDocument.LoadHtml(System.String)">
            <summary>
            Loads a mixed document from a text
            </summary>
            <param name="html">The text to load.</param>
        </member>
        <member name="M:JetyDu.HttpParse.MixedCodeDocument.Save(System.IO.Stream)">
            <summary>
            Saves the mixed document to the specified stream.
            </summary>
            <param name="outStream">The stream to which you want to save.</param>
        </member>
        <member name="M:JetyDu.HttpParse.MixedCodeDocument.Save(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Saves the mixed document to the specified stream.
            </summary>
            <param name="outStream">The stream to which you want to save.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:JetyDu.HttpParse.MixedCodeDocument.Save(System.String)">
            <summary>
            Saves the mixed document to the specified file.
            </summary>
            <param name="filename">The location of the file where you want to save the document.</param>
        </member>
        <member name="M:JetyDu.HttpParse.MixedCodeDocument.Save(System.String,System.Text.Encoding)">
            <summary>
            Saves the mixed document to the specified file.
            </summary>
            <param name="filename">The location of the file where you want to save the document.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:JetyDu.HttpParse.MixedCodeDocument.Save(System.IO.StreamWriter)">
            <summary>
            Saves the mixed document to the specified StreamWriter.
            </summary>
            <param name="writer">The StreamWriter to which you want to save.</param>
        </member>
        <member name="M:JetyDu.HttpParse.MixedCodeDocument.Save(System.IO.TextWriter)">
            <summary>
            Saves the mixed document to the specified TextWriter.
            </summary>
            <param name="writer">The TextWriter to which you want to save.</param>
        </member>
        <member name="T:JetyDu.HttpParse.MixedCodeDocumentCodeFragment">
            <summary>
            Represents a fragment of code in a mixed code document.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.MixedCodeDocumentCodeFragment.Code">
            <summary>
            Gets the fragment code text.
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.MixedCodeDocumentFragment">
            <summary>
            Represents a base class for fragments in a mixed code document.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.MixedCodeDocumentFragment.FragmentText">
            <summary>
            Gets the fragement text.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.MixedCodeDocumentFragment.FragmentType">
            <summary>
            Gets the type of fragment.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.MixedCodeDocumentFragment.Line">
            <summary>
            Gets the line number of the fragment.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.MixedCodeDocumentFragment.LinePosition">
            <summary>
            Gets the line position (column) of the fragment.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.MixedCodeDocumentFragment.StreamPosition">
            <summary>
            Gets the fragment position in the document's stream.
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.MixedCodeDocumentFragmentList">
            <summary>
            Represents a list of mixed code fragments.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.MixedCodeDocumentFragmentList.Doc">
            <summary>
             Gets the Document
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.MixedCodeDocumentFragmentList.Count">
            <summary>
            Gets the number of fragments contained in the list.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.MixedCodeDocumentFragmentList.Item(System.Int32)">
            <summary>
            Gets a fragment from the list using its index.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.MixedCodeDocumentFragmentList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator that can iterate through the fragment list.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.MixedCodeDocumentFragmentList.Append(JetyDu.HttpParse.MixedCodeDocumentFragment)">
            <summary>
            Appends a fragment to the list of fragments.
            </summary>
            <param name="newFragment">The fragment to append. May not be null.</param>
        </member>
        <member name="M:JetyDu.HttpParse.MixedCodeDocumentFragmentList.GetEnumerator">
            <summary>
            Gets an enumerator that can iterate through the fragment list.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.MixedCodeDocumentFragmentList.Prepend(JetyDu.HttpParse.MixedCodeDocumentFragment)">
            <summary>
            Prepends a fragment to the list of fragments.
            </summary>
            <param name="newFragment">The fragment to append. May not be null.</param>
        </member>
        <member name="M:JetyDu.HttpParse.MixedCodeDocumentFragmentList.Remove(JetyDu.HttpParse.MixedCodeDocumentFragment)">
            <summary>
            Remove a fragment from the list of fragments. If this fragment was not in the list, an exception will be raised.
            </summary>
            <param name="fragment">The fragment to remove. May not be null.</param>
        </member>
        <member name="M:JetyDu.HttpParse.MixedCodeDocumentFragmentList.RemoveAll">
            <summary>
            Remove all fragments from the list.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.MixedCodeDocumentFragmentList.RemoveAt(System.Int32)">
            <summary>
            Remove a fragment from the list of fragments, using its index in the list.
            </summary>
            <param name="index">The index of the fragment to remove.</param>
        </member>
        <member name="T:JetyDu.HttpParse.MixedCodeDocumentFragmentList.MixedCodeDocumentFragmentEnumerator">
            <summary>
            Represents a fragment enumerator.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.MixedCodeDocumentFragmentList.MixedCodeDocumentFragmentEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.MixedCodeDocumentFragmentList.MixedCodeDocumentFragmentEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.MixedCodeDocumentFragmentList.MixedCodeDocumentFragmentEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.MixedCodeDocumentFragmentList.MixedCodeDocumentFragmentEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.MixedCodeDocumentFragmentType">
            <summary>
            Represents the type of fragment in a mixed code document.
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.MixedCodeDocumentFragmentType.Code">
            <summary>
            The fragment contains code.
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.MixedCodeDocumentFragmentType.Text">
            <summary>
            The fragment contains text.
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.MixedCodeDocumentTextFragment">
            <summary>
            Represents a fragment of text in a mixed code document.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.MixedCodeDocumentTextFragment.Text">
            <summary>
            Gets the fragment text.
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.Helper.DataUtil">
            <summary>
            Internal static utilities for handling data.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.Helper.DataUtil.Load(System.IO.Stream,System.String,System.String)">
            <summary>
            Loads a file to a string.
            </summary>
            <param name="input"></param>
            <param name="charsetName"></param>
            <param name="baseUri"></param>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.Helper.DataUtil.Load(System.IO.Stream,System.String,System.String,JetyDu.HttpParse.Parse.Parser)">
            <summary>
            Parses a Document from an input steam, using the provided Parser.
            </summary>
            <param name="input">Input stream to parse. You will need to close it</param>
            <param name="charsetName">Character set of input</param>
            <param name="baseUri">Base URI of document, to resolve relative links against</param>
            <param name="parser">Alternate parser to use</param>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.Helper.DataUtil.GetCharsetFromContentType(System.String)">
            <summary>
            Parse out a charset from a content type header.  If the charset is not supported, returns null (so the default
            will kick in.)
            </summary>
            <param name="contentType">e.g. "text/html; charset=EUC-JP"</param>
            <returns>"EUC-JP", or null if not found. Charset is trimmed and uppercased.</returns>
        </member>
        <member name="T:JetyDu.HttpParse.Helper.DescendableLinkedList`1">
            <summary>
            Provides a descending iterator and other 1.6 methods to allow support on the 1.5 JRE.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:JetyDu.HttpParse.Helper.DescendableLinkedList`1.#ctor">
            <summary>
            Create a new DescendableLinkedList.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.Helper.DescendableLinkedList`1.GetDescendingEnumerator">
            <summary>
            Get an iterator that starts and the end of the list and works towards the start.
            </summary>
            <returns>an iterator that starts and the end of the list and works towards the start.</returns>
        </member>
        <member name="T:JetyDu.HttpParse.Helper.StringUtil">
            A minimal String utility class. Designed for internal jsoup use only.
        </member>
        <member name="M:JetyDu.HttpParse.Helper.StringUtil.Join(System.Collections.Generic.ICollection{System.String},System.String)">
            <summary>
            Join a collection of strings by a seperator
            </summary>
            <param name="strings">collection of string objects</param>
            <param name="sep">string to place between strings</param>
            <returns>joined string</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Helper.StringUtil.Padding(System.Int32)">
            <summary>
            Returns space padding
            </summary>
            <param name="width">amount of padding desired</param>
            <returns>string of spaces * width</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Helper.StringUtil.IsWhiteSpace(System.Char)">
            <summary>
            Tests if a code point is "whitespace" as defined in the HTML spec.
            </summary>
            <param name="c">Code point to test</param>
            <returns>True if code point is whitespace, false otherwise</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:JetyDu.HttpParse.LinkedHashSet`1.#ctor" -->
        <!-- Badly formed XML comment ignored for member "M:JetyDu.HttpParse.LinkedHashSet`1.#ctor(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:JetyDu.HttpParse.LinkedHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})" -->
        <!-- Badly formed XML comment ignored for member "M:JetyDu.HttpParse.LinkedHashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})" -->
        <!-- Badly formed XML comment ignored for member "M:JetyDu.HttpParse.LinkedHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})" -->
        <!-- Badly formed XML comment ignored for member "M:JetyDu.HttpParse.LinkedHashSet`1.Clear" -->
        <!-- Badly formed XML comment ignored for member "M:JetyDu.HttpParse.LinkedHashSet`1.Contains(`0)" -->
        <!-- Badly formed XML comment ignored for member "M:JetyDu.HttpParse.LinkedHashSet`1.CopyTo(`0[],System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "P:JetyDu.HttpParse.LinkedHashSet`1.Count" -->
        <!-- Badly formed XML comment ignored for member "M:JetyDu.HttpParse.LinkedHashSet`1.Remove(`0)" -->
        <!-- Badly formed XML comment ignored for member "P:JetyDu.HttpParse.LinkedHashSet`1.Comparer" -->
        <!-- Badly formed XML comment ignored for member "M:JetyDu.HttpParse.LinkedHashSet`1.TrimExcess" -->
        <member name="T:JetyDu.HttpParse.HttpStatusException">
            <summary>
            Signals that a HTTP request resulted in a not OK HTTP response.
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.Method">
            <summary>
            GET and POST http methods.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.IConnection.Url(System.Uri)">
            <summary>
            Set the request URL to fetch. The protocol must be HTTP or HTTPS.
            </summary>
            <param name="url">URL to connect to</param>
            <returns>this IConnection, for chaining</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IConnection.Url(System.String)">
            <summary>
            Set the request URL to fetch. The protocol must be HTTP or HTTPS.
            </summary>
            <param name="url">URL to connect to</param>
            <returns>this IConnection, for chaining</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IConnection.UserAgent(System.String)">
            <summary>
            Set the request user-agent header.
            </summary>
            <param name="userAgent">user-agent to use</param>
            <returns>this IConnection, for chaining</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IConnection.Timeout(System.Int32)">
            <summary>
            Set the request timeouts (connect and read). If a timeout occurs, an IOException will be thrown. The default 
            timeout is 3 seconds (3000 millis). A timeout of zero is treated as an infinite timeout.
            </summary>
            <param name="millis">number of milliseconds (thousandths of a second) before timing out connects or reads.</param>
            <returns>this IConnection, for chaining</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IConnection.Referrer(System.String)">
            <summary>
            Set the request referrer (aka "referer") header.
            </summary>
            <param name="referrer">referrer to use</param>
            <returns>this IConnection, for chaining</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IConnection.FollowRedirects(System.Boolean)">
            <summary>
            Configures the connection to (not) follow server redirects. By default this is <b>true</b>.
            </summary>
            <param name="followRedirects">true if server redirects should be followed.</param>
            <returns>this IConnection, for chaining</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IConnection.Method(JetyDu.HttpParse.Method)">
            <summary>
            Set the request method to use, GET or POST. Default is GET.
            </summary>
            <param name="method">HTTP request method</param>
            <returns>this IConnection, for chaining</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IConnection.IgnoreHttpErrors(System.Boolean)">
            <summary>
            Configures the connection to not throw exceptions when a HTTP error occurs. (4xx - 5xx, e.g. 404 or 500). By 
            default this is <b>false</b>; an IOException is thrown if an error is encountered. If set to <b>true</b>, the 
            response is populated with the error body, and the status message will reflect the error.
            </summary>
            <param name="ignoreHttpErrors">false (default) if HTTP errors should be ignored</param>
            <returns>this IConnection, for chaining</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IConnection.IgnoreContentType(System.Boolean)">
            <summary>
            Ignore the document's Content-Type when parsing the response. By default this is <b>false</b>, an unrecognised 
            content-type will cause an IOException to be thrown. (This is to prevent producing garbage by attempting to parse 
            a JPEG binary image, for example.) Set to true to force a parse attempt regardless of content type.
            </summary>
            <param name="ignoreContentType">set to true if you would like the content type ignored on parsing the response into a Document</param>
            <returns>this IConnection, for chaining</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IConnection.Data(System.String,System.String)">
            <summary>
            Add a request data parameter. Request parameters are sent in the request query string for GETs, and in the request 
            body for POSTs. A request may have multiple values of the same name.
            </summary>
            <param name="key">data key</param>
            <param name="value">data value</param>
            <returns>this IConnection, for chaining</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IConnection.Data(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Adds all of the supplied data to the request data parameters
            </summary>
            <param name="data">dictionary of data parameters</param>
            <returns>this IConnection, for chaining</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:JetyDu.HttpParse.IConnection.Data(System.String[])" -->
        <member name="M:JetyDu.HttpParse.IConnection.Header(System.String,System.String)">
            <summary>
            Set a request header.
            </summary>
            <param name="name">header name</param>
            <param name="value">header value</param>
            <returns>this IConnection, for chaining</returns>
            <seealso cref="!:IConnection.Request.Headers()"/>
        </member>
        <member name="M:JetyDu.HttpParse.IConnection.Cookie(System.String,System.String)">
            <summary>
            Set a cookie to be sent in the request.
            </summary>
            <param name="name">name of cookie</param>
            <param name="value">value of cookie</param>
            <returns>this IConnection, for chaining</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IConnection.Cookies(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Adds each of the supplied cookies to the request.
            </summary>
            <param name="cookies">Map of cookie name -> value pairs</param>
            <returns>This Connection, for chaining</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IConnection.Parser(JetyDu.HttpParse.Parse.Parser)">
            <summary>
            Provide an alternate parser to use when parsing the response to a Document.
            </summary>
            <param name="parser">Alternate parser</param>
            <returns>This Connection, for chaining</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IConnection.Get">
            <summary>
            Execute the request as a GET, and parse the result.
            </summary>
            <returns>Parsed Document</returns>
            <exception cref="T:JetyDu.HttpParse.HttpStatusException">If the response is not OK and HTTP response errors are not ignored</exception>
            <exception cref="T:JetyDu.HttpParse.UnsupportedMimeTypeException">If the response mime type is not supported and those errors are not ignored</exception>
            //@throws java.net.MalformedURLException if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed
            //@throws java.net.SocketTimeoutException if the connection times out
            <exception cref="T:System.IO.IOException">On error</exception>
        </member>
        <member name="M:JetyDu.HttpParse.IConnection.Post">
            <summary>
            Execute the request as a POST, and parse the result.
            </summary>
            <returns>Parsed Document</returns>
            <exception cref="T:JetyDu.HttpParse.HttpStatusException">If the response is not OK and HTTP response errors are not ignored</exception>
            <exception cref="T:JetyDu.HttpParse.UnsupportedMimeTypeException">If the response mime type is not supported and those errors are not ignored</exception>
            //@throws java.net.MalformedURLException if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed
            //@throws java.net.SocketTimeoutException if the connection times out
            <exception cref="T:System.IO.IOException">On error</exception>
        </member>
        <member name="M:JetyDu.HttpParse.IConnection.Execute">
            <summary>
            Execute the request.
            </summary>
            <returns>a response object</returns>
            <exception cref="T:JetyDu.HttpParse.HttpStatusException">If the response is not OK and HTTP response errors are not ignored</exception>
            <exception cref="T:JetyDu.HttpParse.UnsupportedMimeTypeException">If the response mime type is not supported and those errors are not ignored</exception>
            //@throws java.net.MalformedURLException if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed
            //@throws java.net.SocketTimeoutException if the connection times out
            <exception cref="T:System.IO.IOException">On error</exception>
        </member>
        <member name="M:JetyDu.HttpParse.IConnection.Request">
            <summary>
            Get the request object associated with this IConnection
            </summary>
            <returns>request</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IConnection.Request(JetyDu.HttpParse.IRequest)">
            <summary>
            Set the IConnection's request
            </summary>
            <param name="request">new request object</param>
            <returns>this IConnection, for chaining</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IConnection.Response">
            <summary>
            Get the response, once the request has been executed
            </summary>
            <returns>response</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IConnection.Response(JetyDu.HttpParse.IResponse)">
            <summary>
            Set the connection's response
            </summary>
            <param name="response">new response</param>
            <returns>this IConnection, for chaining</returns>
        </member>
        <member name="T:JetyDu.HttpParse.IConnectionBase`1">
            <summary>
            Common methods for Requests and Responses
            </summary>
            <typeparam name="T">Type of IConnectionBase, either Request or Response</typeparam>
        </member>
        <member name="M:JetyDu.HttpParse.IConnectionBase`1.Url">
            <summary>
            Gets the URL
            </summary>
            <returns>URL</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IConnectionBase`1.Url(System.Uri)">
            <summary>
            Sets the URL
            </summary>
            <param name="url">new URL</param>
            <returns>this, for chaining</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IConnectionBase`1.Method">
            <summary>
            Gets the request method
            </summary>
            <returns>method</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IConnectionBase`1.Method(JetyDu.HttpParse.Method)">
            <summary>
            Sets the request method
            </summary>
            <param name="method">new method</param>
            <returns>this, for chaining</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IConnectionBase`1.Header(System.String)">
            <summary>
            Gets the value of a header. This is a simplified header model, where a header may only have one value.
            Header names are case insensitive.
            </summary>
            <param name="name">name of header (case insensitive)</param>
            <returns>value of header, or null if not set.</returns>
            <see cref="M:JetyDu.HttpParse.IConnectionBase`1.HasHeader(System.String)"/>
            <see cref="M:JetyDu.HttpParse.IConnectionBase`1.Cookie(System.String)"/>
        </member>
        <member name="M:JetyDu.HttpParse.IConnectionBase`1.Header(System.String,System.String)">
            <summary>
            Sets a header. This method will overwrite any existing header with the same case insensitive name. 
            </summary>
            <param name="name">Name of header</param>
            <param name="value">Value of header</param>
            <returns>this, for chaining</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IConnectionBase`1.HasHeader(System.String)">
            <summary>
            Check if a header is present
            </summary>
            <param name="name">name of header (case insensitive)</param>
            <returns>if the header is present in this request/response</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IConnectionBase`1.RemoveHeader(System.String)">
            <summary>
            Remove a header by name
            </summary>
            <param name="name">name of header to remove (case insensitive)</param>
            <returns>this, for chaining</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IConnectionBase`1.Headers">
            <summary>
            Retrieve all of the request/response headers as a map
            </summary>
            <returns>headers</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IConnectionBase`1.Cookie(System.String)">
            <summary>
            Gets a cookie value by name from this request/response.
            Response objects have a simplified cookie model. Each cookie set in the response is added to the response 
            object's cookie key=value map. The cookie's path, domain, and expiry date are ignored.
            </summary>
            <param name="name">name of cookie to retrieve.</param>
            <returns>value of cookie, or null if not set</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IConnectionBase`1.Cookie(System.String,System.String)">
            <summary>
            Sets a cookie in this request/response.
            </summary>
            <param name="name">name of cookie</param>
            <param name="value">value of cookie</param>
            <returns>this, for chaining</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IConnectionBase`1.HasCookie(System.String)">
            <summary>
            Check if a cookie is present
            </summary>
            <param name="name">name of cookie</param>
            <returns>if the cookie is present in this request/response</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IConnectionBase`1.RemoveCookie(System.String)">
            <summary>
            Remove a cookie by name
            </summary>
            <param name="name">name of cookie to remove</param>
            <returns>this, for chaining</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IConnectionBase`1.Cookies">
            <summary>
            Retrieve all of the request/response cookies as a map
            </summary>
            <returns>cookies</returns>
        </member>
        <member name="T:JetyDu.HttpParse.IRequest">
            <summary>
            Represents a HTTP request.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.IRequest.Timeout">
            <summary>
            Gets the request timeout, in milliseconds.
            </summary>
            <returns>the timeout in milliseconds.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IRequest.Timeout(System.Int32)">
            <summary>
            Update the request timeout.
            </summary>
            <param name="millis">timeout, in milliseconds</param>
            <returns>this Request, for chaining</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IRequest.MaxBodySize(System.Int32)">
            <summary>
            Update the maximum allowed body size
            </summary>
            <param name="bytes">bytes, as an integer</param>
            <returns>this Rquest for chaining</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IRequest.FollowRedirects">
            <summary>
            Get the current followRedirects configuration.
            </summary>
            <returns>true if followRedirects is enabled.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IRequest.FollowRedirects(System.Boolean)">
            <summary>
            Configures the request to (not) follow server redirects. By default this is <b>true</b>.
            </summary>
            <param name="followRedirects">true if server redirects should be followed.</param>
            <returns>This IRequest, for chaining</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IRequest.IgnoreHttpErrors">
            <summary>
            Gets the current IgnoreHttpErrors configuration.
            </summary>
            <returns>true if errors will be ignored; false (default) if HTTP errors will cause an IOException to be thrown</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IRequest.IgnoreHttpErrors(System.Boolean)">
            <summary>
            Configures the request to ignore HTTP errors in the response.
            </summary>
            <param name="ignoreHttpErrors">set to true to ignore HTTP errors.</param>
            <returns>This IRequest, for chaining</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IRequest.ValidateTLSCertificates(System.Boolean)">
            <summary>
            Configure the request to validate TLS Certificates
            </summary>
            <param name="value">set to true to validate tls certs</param>
            <returns>this IRequest for chaining</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IRequest.IgnoreContentType">
            <summary>
            Gets the current IgnoreContentType configuration.
            </summary>
            <returns>true if invalid content-types will be ignored; false (default) if they will cause an IOException to be thrown</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IRequest.IgnoreContentType(System.Boolean)">
            <summary>
            Configures the request to ignore the Content-Type of the response.
            </summary>
            <param name="ignoreContentType">set to true to ignore the contenet type</param>
            <returns>This IRequest, for chaining</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IRequest.Data(JetyDu.HttpParse.Helper.KeyVal)">
            <summary>
            Add a data parameter to the request
            </summary>
            <param name="keyval">data to add.</param>
            <returns>this Request, for chaining</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IRequest.Data">
            <summary>
            Get all of the request's data parameters
            </summary>
            <returns>collection of keyvals</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IRequest.Parser(JetyDu.HttpParse.Parse.Parser)">
            <summary>
            Specify the parser to use when parsing the document.
            </summary>
            <param name="parser">Parser to use.</param>
            <returns>This IRequest, for chaining</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IRequest.Parser">
            <summary>
            Get the current parser to use when parsing the document.
            </summary>
            <returns>Current Parser</returns>
        </member>
        <member name="T:JetyDu.HttpParse.IResponse">
            <summary>
            Represents a HTTP response.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.IResponse.StatusCode">
            <summary>
            Gets the status code of the response.
            </summary>
            <returns>status code</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IResponse.StatusMessage">
            <summary>
            Gets the status message of the response.
            </summary>
            <returns>status message</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IResponse.Charset">
            <summary>
            Gets the character set name of the response.
            </summary>
            <returns>character set name</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IResponse.ContentType">
            <summary>
            Gets the response content type (e.g. "text/html");
            </summary>
            <returns>the response content type</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IResponse.Parse">
            <summary>
            Parse the body of the response as a Document.
            </summary>
            <returns>a parsed Document</returns>
            <exception cref="T:System.IO.IOException" />
        </member>
        <member name="M:JetyDu.HttpParse.IResponse.Body">
            <summary>
            Gets the body of the response as a plain string.
            </summary>
            <returns>body</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IResponse.BodyAsBytes">
            <summary>
            Gets the body of the response as an array of bytes.
            </summary>
            <returns>body bytes</returns>
        </member>
        <member name="P:JetyDu.HttpParse.IResponse.NumRedirects">
            <summary>
            Gets number of redirects.
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.IKeyVal">
            <summary>
            A Key Value tuple.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.IKeyVal.Key(System.String)">
            <summary>
            Update the key of a keyval
            </summary>
            <param name="key">new key</param>
            <returns>this KeyVal, for chaining</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IKeyVal.Key">
            <summary>
            Gets the key of a keyval
            </summary>
            <returns>the key</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IKeyVal.Value(System.String)">
            <summary>
            Update the value of a keyval
            </summary>
            <param name="value">the new value</param>
            <returns>this KeyVal, for chaining</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IKeyVal.Value">
            <summary>
            Gets the value of a keyval
            </summary>
            <returns>the value</returns>
        </member>
        <member name="M:JetyDu.HttpParse.IKeyVal.InputStream(System.IO.Stream)">
            <summary>
            Update stream of a keyval
            </summary>
            <param name="inputStream"></param>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.IKeyVal.InputStream">
            <summary>
            Get the stream of a keyval
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.IKeyVal.HasInputStream">
            <summary>
            Determine if keyval has a stream
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetyDu.HttpParse.Nodes.Attribute">
            <summary>
            A single key + value attribute. Keys are trimmed and normalised to lower-case.
            </summary>
            <!-- 
            Original Author: Jonathan Hedley, jonathan@hedley.net
            Ported to .NET by: Amir Grozki
            -->   
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Attribute.#ctor(System.String,System.String)">
            <summary>
            Create a new attribute from unencoded (raw) key and value. 
            </summary>
            <param name="key">attribute key</param>
            <param name="value">attribute value</param>
            <see cref="!:createFromEncoded"/>
        </member>
        <member name="P:JetyDu.HttpParse.Nodes.Attribute.Key">
            <summary>
            Gets or sets the Key property.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.Nodes.Attribute.Value">
            <summary>
            Gets or sets the Value property.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Attribute.GetValue">
            <summary>
            Get the attribute value.
            </summary>
            <returns>the attribute value</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Attribute.SetValue(System.String)">
            <summary>
            Set the attribute value.
            </summary>
            <param name="value">the new attribute value; must not be null</param>
            <returns>old value</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Attribute.Html">
            <summary>
            Get the HTML representation of this attribute; e.g. <code>href="index.html"</code>
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Attribute.ToString">
            <summary>
            Get the string representation of this attribute, implemented as <see cref="M:JetyDu.HttpParse.Nodes.Attribute.Html"/>.
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Attribute.CreateFromEncoded(System.String,System.String)">
            <summary>
            Create a new Attribute from an unencoded key and a HTML attribute encoded value.
            </summary>
            <param name="unencodedKey">assumes the key is not encoded, as can be only run of simple \w chars.</param>
            <param name="encodedValue">HTML attribute encoded value</param>
            <returns>attribute</returns>
        </member>
        <member name="T:JetyDu.HttpParse.Nodes.Attributes">
            <summary>
            The attributes of an Element.
            </summary>
            <remarks>
            Attributes are treated as a map: there can be only one value associated with an attribute key.
            Attribute key and value comparisons are done case insensitively, and keys are normalised to
            lower-case.
            </remarks>
            <!--
            Original Author: Jonathan Hedley, jonathan@hedley.net
            Ported to .NET by: Amir Grozki
            -->
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Attributes.Add(System.String,System.String)">
            <summary>
            Set a new attribute, or replace an existing one by key.
            </summary>
            <param name="key">attribute key</param>
            <param name="value">attribute value</param>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Attributes.Add(JetyDu.HttpParse.Nodes.Attribute)">
            <summary>
            Set a new attribute, or replace an existing one by key.
            </summary>
            <param name="attribute">attribute</param>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Attributes.GetValue(System.String)">
            <summary>
            Get an attribute value by key.
            </summary>
            <param name="key">the attribute key</param>
            <returns>the attribute value if set; or empty string if not set.</returns>
            <see cref="!:HasKey(string)"/>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Attributes.Remove(System.String)">
            <summary>
            Remove an attribute by key.
            </summary>
            <param name="key">attribute key to remove</param>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Attributes.ContainsKey(System.String)">
            <summary>
            Tests if these attributes contain an attribute with this key.
            </summary>
            <param name="key">key to check for</param>
            <returns>true if key exists, false otherwise</returns>
        </member>
        <member name="P:JetyDu.HttpParse.Nodes.Attributes.Count">
            <summary>
            Gets the number of attributes in this set.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Attributes.AddRange(JetyDu.HttpParse.Nodes.Attributes)">
            <summary>
            Add all the attributes from the incoming set to this set.
            </summary>
            <param name="incoming">attributes to add to these attributes.</param>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Attributes.AsList">
            <summary>
            Gets the attributes as a List, for iteration.
            </summary>
            <remarks>
            Do not modify the keys of the attributes via this view, as changes 
            to keys will not be recognised in the containing set.
            </remarks>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Attributes.GetDataset">
            <summary>
            Retrieves a filtered view of attributes that are HTML5 custom data attributes; that is, attributes with keys
            starting with <code>data-</code>.
            </summary>
            <returns>map of custom data attributes.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Attributes.Html">
            <summary>
            Gets the HTML representation of these attributes.
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.Nodes.Attributes.Dataset">
            <summary>
            A dictionary which filters through the list of attribute and works only against data attributes (attributes prefixed with "data-").
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:JetyDu.HttpParse.Nodes.Attributes.Dataset.GetDataAttributeKeyValuePair(System.String,System.String)" -->
        <member name="T:JetyDu.HttpParse.Nodes.Comment">
            <summary>
            A comment node.
            </summary>
            <!--
            Original author: Jonathan Hedley, jonathan@hedley.net
            Ported to .NET by: Amir Grozki
            -->
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Comment.#ctor(System.String,System.String)">
            <summary>
            Create a new comment node.
            </summary>
            <param name="data">The contents of the comment</param>
            <param name="baseUri">base URI</param>
        </member>
        <member name="P:JetyDu.HttpParse.Nodes.Comment.NodeName">
            <summary>
            Gets the node's name.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Comment.GetData">
            <summary>
            Get the contents of the comment.
            </summary>
            <returns>Content</returns>
        </member>
        <member name="T:JetyDu.HttpParse.Nodes.DataNode">
            <summary>
            A data node, for contents of style, script tags etc, where contents should not show in text().
            </summary>
            <!--
            Original Author: Jonathan Hedley, jonathan@hedley.net
            Ported to .NET by: Amir Grozki
            -->
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.DataNode.#ctor(System.String,System.String)">
            <summary>
            Create a new DataNode.
            </summary>
            <param name="data">data contents</param>
            <param name="baseUri">base URI</param>
        </member>
        <member name="P:JetyDu.HttpParse.Nodes.DataNode.NodeName">
            <summary>
            Gets the node's name.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.DataNode.GetWholeData">
            <summary>
            Get the data contents of this node. Will be unescaped and with original new lines, space etc.
            </summary>
            <returns>data</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.DataNode.setWholeData(System.String)">
            <summary>
            Set the data contents of this node.
            </summary>
            <param name="data">unencoded data</param>
            <returns>this node, for chaining</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.DataNode.CreateFromEncoded(System.String,System.String)">
            <summary>
            Create a new DataNode from HTML encoded data.
            </summary>
            <param name="encodedData">encoded data</param>
            <param name="baseUri">bass URI</param>
            <returns>new DataNode</returns>
        </member>
        <member name="T:JetyDu.HttpParse.Nodes.Document">
            <summary>
            A HTML Document.
            </summary>
            <!--
            Original Author: Jonathan Hedley, jonathan@hedley.net
            Ported to .NET by: Amir Grozki
            -->
        </member>
        <!-- Badly formed XML comment ignored for member "M:JetyDu.HttpParse.Nodes.Document.#ctor(System.String)" -->
        <member name="M:JetyDu.HttpParse.Nodes.Document.CreateShell(System.String)">
            <summary>
            Create a valid, empty shell of a document, suitable for adding more elements to.
            </summary>
            <param name="baseUri">baseUri of document</param>
            <returns>document with html, head, and body elements.</returns>
        </member>
        <member name="P:JetyDu.HttpParse.Nodes.Document.Head">
            <summary>
            Gets the document's <code>head</code> element.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.Nodes.Document.Body">
            <summary>
            Gets the document's <code>body</code> element.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.Nodes.Document.Title">
            <summary>
            Gets or sets the string contents of the document's {@code title} element.
            On set, updates the existing element, or adds {@code title} to {@code head} if
            not present.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Document.OutputSettings">
            <summary>
            Gets the document's output settings.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Document.OutputSettings(JetyDu.HttpParse.Nodes.OutputSettings)">
            <summary>
            Sets the document's output settings.
            </summary>
            <param name="outputSettings">New output settings</param>
            <returns>This document, for chaining</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Document.CreateElement(System.String)">
            <summary>
            Create a new Element, with this document's base uri. Does not make the new element a child of this document.
            </summary>
            <param name="tagName">element tag name (e.g. <code>a</code>)</param>
            <returns>new Element</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Document.Normalise">
            <summary>
            Normalise the document. This happens after the parse phase so generally does not need to be called.
            Moves any text content that is not in the body element into the body.
            </summary>
            <returns>this document after normalisation</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Document.Text(System.String)">
            <summary>
            Set the text of the <code>body</code> of this document. Any existing nodes within the body will be cleared.
            </summary>
            <param name="text">unencoded text</param>
            <returns>this document</returns>
        </member>
        <member name="P:JetyDu.HttpParse.Nodes.Document.NodeName">
            <summary>
            Gets the node's name.
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.Nodes.OutputSettings">
            <summary>
            A Document's output settings control the form of the Text() and H   tml() methods.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:JetyDu.HttpParse.Nodes.OutputSettings.EscapeMode" -->
        <member name="M:JetyDu.HttpParse.Nodes.OutputSettings.SetEscapeMode(JetyDu.HttpParse.Nodes.Entities.EscapeMode)">
            <summary>
            Set the document's escape mode
            </summary>
            <param name="escapeMode">the new escape mode to use</param>
            <returns>the document's output settings, for chaining</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "P:JetyDu.HttpParse.Nodes.OutputSettings.Encoding" -->
        <member name="M:JetyDu.HttpParse.Nodes.OutputSettings.SetEncoding(System.Text.Encoding)">
            <summary>
            Update the document's output charset.
            </summary>
            <param name="encoding">the new encoding to use.</param>
            <returns>the document's output settings, for chaining</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.OutputSettings.SetEncoding(System.String)">
            <summary>
            Update the document's output charset.
            </summary>
            <param name="encoding">the new charset (by name) to use.</param>
            <returns>the document's output settings, for chaining</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.OutputSettings.PrettyPrint">
            <summary>
            Get if pretty printing is enabled. Default is true. If disabled, the HTML output methods will not re-format 
            the output, and the output will generally look like the input.
            </summary>
            <returns>if pretty printing is enabled.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.OutputSettings.PrettyPrint(System.Boolean)">
            <summary>
            Enable or disable pretty printing.
            </summary>
            <param name="pretty">new pretty print setting</param>
            <returns>this, for chaining</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.OutputSettings.IndentAmount">
            <summary>
            Get the current tag indent amount, used when pretty printing.
            </summary>
            <returns>the current indent amount</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.OutputSettings.IndentAmount(System.Int32)">
            <summary>
            Set the indent amount for pretty printing
            </summary>
            <param name="indentAmount">number of spaces to use for indenting each level. Must be >= 0.</param>
            <returns>this, for chaining</returns>
        </member>
        <member name="T:JetyDu.HttpParse.Nodes.DocumentType">
            <summary>
            A <code>&lt;!DOCTPYE&gt;</code> node.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.DocumentType.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Create a new doctype element.
            </summary>
            <param name="name">the doctype's name</param>
            <param name="publicId">the doctype's public ID</param>
            <param name="systemId">the doctype's system ID</param>
            <param name="baseUri">the doctype's base URI</param>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.#ctor(JetyDu.HttpParse.Parse.Tag,System.String,JetyDu.HttpParse.Nodes.Attributes)">
            <summary>
            Create a new, standalone Element. (Standalone in that is has no parent.)
            </summary>
            <param name="tag">tag of this element</param>
            <param name="baseUri">baseUri the base URI</param>
            <param name="attributes">initial attributes</param>
            <see cref="M:JetyDu.HttpParse.Nodes.Element.AppendChild(JetyDu.HttpParse.Nodes.Node)"/>
            <see cref="M:JetyDu.HttpParse.Nodes.Element.AppendElement(System.String)"/>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.#ctor(JetyDu.HttpParse.Parse.Tag,System.String)">
            <summary>
            Create a new Element from a tag and a base URI.
            </summary>
            <param name="tag">element tag</param>
            <param name="baseUri">the base URI of this element. It is acceptable for the base URI to be an empty string, but not null.</param>
            <see cref="M:JetyDu.HttpParse.Parse.Tag.ValueOf(System.String)"/>
        </member>
        <member name="P:JetyDu.HttpParse.Nodes.Element.NodeName">
            <summary>
            Gets the node's name.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.TagName">
            <summary>
            Gets the name of the tag for this element. E.g: <code>div</code>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:JetyDu.HttpParse.Nodes.Element.TagName(System.String)" -->
        <member name="P:JetyDu.HttpParse.Nodes.Element.Tag">
            <summary>
            Gets the Tag for this element.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.Nodes.Element.IsBlock">
            <summary>
            Test if this element is a block-level element. (E.g. <code>&lt;div&gt; == true</code> or an inline element <code>&lt;p&gt; == false</code>).
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.Nodes.Element.Id">
            <summary>
            Gets the <code>id</code> attribute of this element.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.Attr(System.String,System.String)">
            <summary>
            Set an attribute value on this element. If this element already has an attribute with the 
            key, its value is updated; otherwise, a new attribute is added.
            </summary>
            <param name="attributeKey">attribute key</param>
            <param name="attributeValue">attribute value</param>
            <returns>this element</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "P:JetyDu.HttpParse.Nodes.Element.Dataset" -->
        <member name="P:JetyDu.HttpParse.Nodes.Element.Parent">
            <summary>
            Gets the parent element.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.Nodes.Element.Parents">
            <summary>
            Gets this element's parent and ancestors, up to the document root.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.Child(System.Int32)">
            <summary>
            Get a child element of this element, by its 0-based index number.
            
            * @param index the index number of the element to retrieve
            </summary>
            <remarks>
            Note that an element can have both mixed Nodes and Elements as children. This method inspects 
            a filtered list of children that are elements, and the index is based on that filtered list.
            </remarks>
            <param name="index">The index of child to return</param>
            <returns>the child element, if it exists, or <code>null</code> if absent.</returns>
            <see cref="!:ChildNode(int)"/>
        </member>
        <member name="P:JetyDu.HttpParse.Nodes.Element.Children">
            <summary>
            Gets this element's child elements.
            </summary>
            <remarks>
            This is effectively a filter on {@link #childNodes()} to get Element nodes.
            If this element has no children, returns an empty list.
            </remarks>
            <see cref="!:ChildNodes()"/>
        </member>
        <!-- Badly formed XML comment ignored for member "P:JetyDu.HttpParse.Nodes.Element.TextNodes" -->
        <member name="P:JetyDu.HttpParse.Nodes.Element.DataNodes">
            <summary>
            Gets this element's child data nodes. The list is unmodifiable but the data nodes may be manipulated.
            This is effectively a filter on ChildNodes to get Data nodes.
            </summary>
            <seealso cref="P:JetyDu.HttpParse.Nodes.Element.Data"/>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.Select(System.String)">
            <summary>
            Find elements that match the <see cref="T:JetyDu.HttpParse.Select.Selector"/> query, with this element as the starting context. Matched elements 
            may include this element, or any of its children.
            </summary>
            <param name="cssQuery">a Selector CSS-like query</param>
            <returns>elements that match the query (empty if none match)</returns>
            <see cref="!:NSoup.Select.Selector"/>
            <remarks>
            This method is generally more powerful to use than the DOM-type {@code getElementBy*} methods, because 
            multiple filters can be combined, e.g.: 
            &lt;ul&gt;
            &lt;li&gt;<code>el.select("a[href]")</code> - finds links <code>a</code> tags with <code>href</code> attributes) 
            &lt;li&gt;<code>el.select("a[href*=example.com]")</code> - finds links pointing to example.com (loosely) 
            &lt;/ul&gt; 
            See the query syntax documentation in <see cref="!:NSoup.Select.Selector"/>
            </remarks>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.AppendChild(JetyDu.HttpParse.Nodes.Node)">
            <summary>
            Add a node child node to this element.
            </summary>
            <param name="child">node to add. Must not already have a parent.</param>
            <returns>this element, so that you can add more child nodes or elements.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.PrependChild(JetyDu.HttpParse.Nodes.Node)">
            <summary>
            Add a node to the start of this element's children.
            </summary>
            <param name="child">node to add. Must not already have a parent.</param>
            <returns>this element, so that you can add more child nodes or elements.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.AppendElement(System.String)">
            <summary>
            Create a new element by tag name, and add it as the last child.
            </summary>
            <param name="tagName">the name of the tag (e.g. <code>div</code>).</param>
            <returns>the new element, to allow you to add content to it, e.g.:
            <code>parent.AppendElement("h1").Attr("id", "header").Text("Welcome");</code>
            </returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.PrependElement(System.String)">
            <summary>
            Create a new element by tag name, and add it as the first child.
            </summary>
            <param name="tagName">the name of the tag (e.g. <code>div</code>).</param>
            <returns>
            the new element, to allow you to add content to it, e.g.: 
            <code>parent.PrependElement("h1").Attr("id", "header").Text("Welcome");</code>
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:JetyDu.HttpParse.Nodes.Element.AppendText(System.String)" -->
        <member name="M:JetyDu.HttpParse.Nodes.Element.PrependText(System.String)">
            <summary>
            Create and prepend a new TextNode to this element.
            </summary>
            <param name="text">the unencoded text to add</param>
            <returns>this element</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.Append(System.String)">
            <summary>
            Add inner HTML to this element. The supplied HTML will be parsed, and each node appended to the end of the children.
            </summary>
            <param name="html">HTML to add inside this element, after the existing HTML</param>
            <returns>this element</returns>
            <see cref="M:JetyDu.HttpParse.Nodes.Element.Html(System.String)"/>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.Prepend(System.String)">
            <summary>
            Add inner HTML into this element. The supplied HTML will be parsed, and each node prepended to the start of the children.
            </summary>
            <param name="html">HTML to add inside this element, before the existing HTML</param>
            <returns>this element</returns>
            <see cref="M:JetyDu.HttpParse.Nodes.Element.Html(System.String)"/>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.Before(System.String)">
            <summary>
            Insert the specified HTML into the DOM before this element (as a preceding sibling).
            </summary>
            <param name="html">HTML to add before this element</param>
            <returns>this element, for chaining</returns>
            <seealso cref="M:JetyDu.HttpParse.Nodes.Element.After(System.String)"/>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.Before(JetyDu.HttpParse.Nodes.Node)">
            <summary>
            Insert the specified node into the DOM before this node (as a preceding sibling). 
            </summary>
            <param name="node">node to add before this element</param>
            <returns>this Element, for chaining</returns>
            <see cref="M:JetyDu.HttpParse.Nodes.Element.After(JetyDu.HttpParse.Nodes.Node)"/>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.After(System.String)">
            <summary>
            Insert the specified HTML into the DOM after this element (as a following sibling).
            </summary>
            <param name="html">HTML to add after this element</param>
            <returns>this element, for chaining</returns>
            <seealso cref="M:JetyDu.HttpParse.Nodes.Element.Before(System.String)"/>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.After(JetyDu.HttpParse.Nodes.Node)">
            <summary>
            Insert the specified node into the DOM after this node (as a following sibling).
            </summary>
            <param name="node">node to add after this element</param>
            <returns>this element, for chaining</returns>
            <see cref="M:JetyDu.HttpParse.Nodes.Element.Before(JetyDu.HttpParse.Nodes.Node)"/>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.Empty">
            <summary>
            Remove all of the element's child nodes. Any attributes are left as-is.
            </summary>
            <returns>this element</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.Wrap(System.String)">
            <summary>
            Wrap the supplied HTML around this element.
            </summary>
            <param name="html">HTML to wrap around this element, e.g. <code>&lt;div class="head"&gt;&lt;/div&gt;</code>. Can be arbitralily deep.</param>
            <returns>this element, for chaining.</returns>
        </member>
        <member name="P:JetyDu.HttpParse.Nodes.Element.SiblingElements">
            <summary>
            Gets sibling elements. If the element has no sibling elements, returns an empty list. An element is not a sibling
            of itself, so will not be included in the returned list.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.Nodes.Element.NextElementSibling">
            <summary>
            Gets the next sibling element of this element. E.g., if a <code>div</code> contains two <code>p</code>s, 
            the <code>NextElementSibling</code> of the first <code>p</code> is the second <code>p</code>.
            </summary>
            <remarks>
            This is similar to {@link #nextSibling()}, but specifically finds only Elements.
            </remarks>
            <see cref="P:JetyDu.HttpParse.Nodes.Element.PreviousElementSibling"/>
        </member>
        <member name="P:JetyDu.HttpParse.Nodes.Element.PreviousElementSibling">
            <summary>
            Gets the previous element sibling of this element.
            </summary>
            <see cref="P:JetyDu.HttpParse.Nodes.Element.NextElementSibling"/>
        </member>
        <member name="P:JetyDu.HttpParse.Nodes.Element.FirstElementSibling">
            <summary>
            Gets the first element sibling of this element.
            Will return the first sibling that is an element (aka the parent's first element child).
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.Nodes.Element.ElementSiblingIndex">
            <summary>
            Gets the list index of this element in its element sibling list. I.e. if this is the first element 
            sibling, returns 0.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.Nodes.Element.LastElementSibling">
            <summary>
            Gets the last element sibling of this element.
            Will return the last sibling that is an element (aka the parent's last element child).
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.GetElementsByTag(System.String)">
            <summary>
            Finds elements, including and recursively under this element, with the specified tag name.
            </summary>
            <param name="tagName">The tag name to search for (case insensitively).</param>
            <returns>a matching unmodifiable list of elements. Will be empty if this element and none of its children match.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.GetElementById(System.String)">
            <summary>
            Find an element by ID, including or under this element.
            </summary>
            <param name="id">The ID to search for.</param>
            <returns>The first matching element by ID, starting with this element, or null if none found.</returns>
            <remarks>
            Note that this finds the first matching ID, starting with this element. If you search down from a different 
            starting point, it is possible to find a different element by ID. For unique element by ID within a Document, 
            use <seealso cref="!:Document.GetElementById(string)"/>
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:JetyDu.HttpParse.Nodes.Element.GetElementsByClass(System.String)" -->
        <member name="M:JetyDu.HttpParse.Nodes.Element.GetElementsByAttribute(System.String)">
            <summary>
            Find elements that have a named attribute set. Case insensitive.
            </summary>
            <param name="key">name of the attribute, e.g. <code>href</code></param>
            <returns>elements that have this attribute, empty if none</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.GetElementsByAttributeStarting(System.String)">
            <summary>
            Find elements that have an attribute name starting with the supplied prefix. Use <code>data-</code> to find elements 
            that have HTML5 datasets. 
            </summary>
            <param name="keyPrefix">name prefix of the attribute e.g. <code>data-</code></param>
            <returns>elements that have attribute names that start with with the prefix, empty if none.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.GetElementsByAttributeValue(System.String,System.String)">
            <summary>
            Find elements that have an attribute with the specific value. Case insensitive.
            </summary>
            <param name="key">name of the attribute</param>
            <param name="value">value of the attribute</param>
            <returns>elements that have this attribute with this value, empty if none</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.GetElementsByAttributeValueNot(System.String,System.String)">
            <summary>
            Find elements that either do not have this attribute, or have it with a different value. Case insensitive.
            </summary>
            <param name="key">name of the attribute</param>
            <param name="value">value of the attribute</param>
            <returns>elements that do not have a matching attribute</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.GetElementsByAttributeValueStarting(System.String,System.String)">
            <summary>
            Find elements that have attributes that start with the value prefix. Case insensitive.
            </summary>
            <param name="key">name of the attribute</param>
            <param name="valuePrefix">start of attribute value</param>
            <returns>elements that have attributes that start with the value prefix</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.GetElementsByAttributeValueEnding(System.String,System.String)">
            <summary>
            Find elements that have attributes that end with the value suffix. Case insensitive.
            </summary>
            <param name="key">name of the attribute</param>
            <param name="valueSuffix">end of the attribute value</param>
            <returns>elements that have attributes that end with the value suffix</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.GetElementsByAttributeValueContaining(System.String,System.String)">
            <summary>
            Find elements that have attributes whose value contains the match string. Case insensitive.
            </summary>
            <param name="key">name of the attribute</param>
            <param name="match">substring of value to search for</param>
            <returns>elements that have attributes containing this text</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.GetElementsByAttributeValueMatching(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Find elements that have attributes whose values match the supplied regular expression.
            </summary>
            <param name="key">name of the attribute</param>
            <param name="pattern">regular expression to match against attribute values</param>
            <returns>elements that have attributes matching this regular expression</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.GetElementsByAttributeValueMatching(System.String,System.String)">
            <summary>
            Find elements that have attributes whose values match the supplied regular expression.
            </summary>
            <param name="key">name of the attribute</param>
            <param name="regex">regular expression to match against attribute values.</param>
            <returns>elements that have attributes matching this regular expression</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.GetElementsByIndexLessThan(System.Int32)">
            <summary>
            Find elements whose sibling index is less than the supplied index.
            </summary>
            <param name="index">0-based index</param>
            <returns>elements less than index</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.GetElementsByIndexGreaterThan(System.Int32)">
            <summary>
            Find elements whose sibling index is greater than the supplied index.
            </summary>
            <param name="index">0-based index</param>
            <returns>elements greater than index</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.GetElementsByIndexEquals(System.Int32)">
            <summary>
            Find elements whose sibling index is equal to the supplied index.
            </summary>
            <param name="index">0-based index</param>
            <returns>elements equal to index</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.GetElementsContainingText(System.String)">
            <summary>
            Find elements that contain the specified string. The search is case insensitive. The text may appear directly 
            in the element, or in any of its descendants.
            </summary>
            <param name="searchText">to look for in the element's text</param>
            <returns>elements that contain the string, case insensitive.</returns>
            <see cref="M:JetyDu.HttpParse.Nodes.Element.Text"/>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.GetElementsContainingOwnText(System.String)">
            <summary>
            Find elements that directly contain the specified string. The search is case insensitive. The text must appear directly 
            in the element, not in any of its descendants.
            </summary>
            <param name="searchText">to look for in the element's own text</param>
            <returns>elements that contain the string, case insensitive.</returns>
            <see cref="M:JetyDu.HttpParse.Nodes.Element.OwnText"/>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.GetElementsMatchingText(System.Text.RegularExpressions.Regex)">
            <summary>
            Find elements whose text matches the supplied regular expression.
            </summary>
            <param name="regex">regular expression to match text against</param>
            <returns>elements matching the supplied regular expression.</returns>
            <see cref="M:JetyDu.HttpParse.Nodes.Element.Text"/>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.GetElementsMatchingText(System.String)">
            <summary>
            Find elements whose text matches the supplied regular expression.
            </summary>
            <param name="regex">regular expression to match text against.</param>
            <returns>elements matching the supplied regular expression.</returns>
            <see cref="M:JetyDu.HttpParse.Nodes.Element.Text"/>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.GetElementsMatchingOwnText(System.Text.RegularExpressions.Regex)">
            <summary>
            Find elements whose own text matches the supplied regular expression.
            </summary>
            <param name="pattern">regular expression to match text against</param>
            <returns>elements matching the supplied regular expression.</returns>
            <see cref="M:JetyDu.HttpParse.Nodes.Element.OwnText"/>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.GetElementsMatchingOwnText(System.String)">
            <summary>
            Find elements whose text matches the supplied regular expression.
            </summary>
            <param name="regex">regular expression to match text against. You can use <a href="http://java.sun.com/docs/books/tutorial/essential/regex/pattern.html#embedded">embedded flags</a> (such as (?i) and (?m) to control regex options.</param>
            <returns>elements matching the supplied regular expression.</returns>
            <see cref="M:JetyDu.HttpParse.Nodes.Element.OwnText"/>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.GetAllElements">
            <summary>
            Find all elements under this element (including self, and children of children).
            </summary>
            <returns>all elements</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.Text">
            <summary>
            Gets the combined text of this element and all its children.
            For example, given HTML <code><p>Hello <b>there</b> now!</p></code>, <code>p.Text()</code> returns <code>"Hello there now!"</code>
            </summary>
            <returns>Unencoded text, or empty string if none.</returns>
            <see cref="M:JetyDu.HttpParse.Nodes.Element.OwnText"/>
            <see cref="P:JetyDu.HttpParse.Nodes.Element.TextNodes"/>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.Text(System.String)">
            <summary>
            Set the text of this element. Any existing contents (text or elements) will be cleared
            </summary>
            <param name="text">Unencoded text</param>
            <returns>This element</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.Text(System.Text.StringBuilder)">
            <summary> 
            </summary>
            <param name="accum"></param>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.OwnText">
            <summary>
            Gets the text owned by this element only; does not get the combined text of all children.
            For example, given HTML <code>&lt;p&gt;Hello &lt;b&gt;there&lt;/b&gt; now!&lt;/p&gt;</code>, <code>p.OwnText()</code> returns <code>"Hello now!"</code>,
            whereas <code>p.Text()</code> returns <code>"Hello there now!"</code>.
            Note that the text within the <code>b</code> element is not returned, as it is not a direct child of the <code>p</code> element.
            </summary>
            <returns>unencoded text, or empty string if none.</returns>
            <see cref="M:JetyDu.HttpParse.Nodes.Element.Text"/>
            <see cref="P:JetyDu.HttpParse.Nodes.Element.TextNodes"/>
        </member>
        <member name="P:JetyDu.HttpParse.Nodes.Element.PreserveWhitespace">
            <summary>
            
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.Nodes.Element.HasText">
            <summary>
            Test if this element has any text content (that is not just whitespace).
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.Nodes.Element.Data">
            <summary>
            Gets the combined data of this element. Data is e.g. the inside of a <code>script</code> tag.
            </summary>
            <see cref="P:JetyDu.HttpParse.Nodes.Element.DataNodes"/>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.ClassName">
            <summary>
            Gets the literal value of this element's "class" attribute, which may include multiple class names, space 
            separated. (E.g. on <code>&lt;div class="header gray"&gt;</code> returns, "<code>header gray</code>")
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.ClassNames">
            <summary>
            Gets all of the element's class names. E.g. on element <code>&lt;div class="header gray"}&gt;</code>, 
            returns a set of two elements <code>"header", "gray"</code>. Note that modifications to this set are not pushed to 
            the backing <code>class</code> attribute; use the <seealso cref="!:ClassNames(HashSet)"/> method to persist them. 
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.ClassNames(System.Collections.Generic.HashSet{System.String})">
            <summary>
            Set the element's <code>class</code> attribute to the supplied class names.
            </summary>
            <param name="classNames">set of classes</param>
            <returns>this element, for chaining</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.HasClass(System.String)">
            <summary>
            Tests if this element has a class. Case insensitive.
            </summary>
            <param name="className">name of class to check for</param>
            <returns>true if it does, false if not</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.AddClass(System.String)">
            <summary>
            Add a class name to this element's <code>class</code> attribute.
            </summary>
            <param name="className">class name to add</param>
            <returns>this element</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.RemoveClass(System.String)">
            <summary>
            Remove a class name from this element's <code>class</code> attribute.
            </summary>
            <param name="className">class name to remove</param>
            <returns>this element</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.ToggleClass(System.String)">
            <summary>
            Toggle a class name on this element's <code>class</code> attribute: if present, remove it; otherwise add it.
            </summary>
            <param name="className">class name to toggle</param>
            <returns>this element</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.Val">
            <summary>
            Get the value of a form element (input, textarea, etc).
            </summary>
            <returns>the value of the form element, or empty string if not set.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.Val(System.String)">
            <summary>
            Set the value of a form element (input, textarea, etc).
            </summary>
            <param name="value">value to set</param>
            <returns>this element (for chaining)</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.Html">
            <summary>
            Retrieves the element's inner HTML. E.g. on a <code>&lt;div&gt;</code> with one empty <code>&lt;p&gt;</code>, would return 
            <code>&lt;p&gt;&lt;/p&gt;</code>. (Whereas {@link #outerHtml()} would return <code>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;</code>.)
            </summary>
            <returns>string of HTML.</returns>
            <seealso cref="!:OuterHtml()"/>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Element.Html(System.String)">
            <summary>
            Set this element's inner HTML. Clears the existing HTML first.
            </summary>
            <param name="html">HTML to parse and set into this element</param>
            <returns>this element</returns>
            <seealso cref="M:JetyDu.HttpParse.Nodes.Element.Append(System.String)"/>
        </member>
        <member name="T:JetyDu.HttpParse.Nodes.Entities">
            <summary>
            HTML entities, and escape routines.
            Source: <a href="http://www.w3.org/TR/html5/named-character-references.html#named-character-references">W3C HTML named character references</a>.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Entities.IsNamedEntity(System.String)">
            <summary>
            Check if the input is a known named entity
            </summary>
            <param name="name">the possible entity name (e.g. "lt" or "amp")</param>
            <returns>true if a known named entity</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Entities.IsBaseNamedEntity(System.String)">
            <summary>
            Check if the input is a known named entity in the base entity set.
            </summary>
            <param name="name">The possible entity name (e.g. "lt" or "amp")</param>
            <returns>True if a known named entity in the base set</returns>
            <see cref="M:JetyDu.HttpParse.Nodes.Entities.IsNamedEntity(System.String)"/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:JetyDu.HttpParse.Nodes.Entities.GetCharacterByName(System.String)" -->
        <member name="M:JetyDu.HttpParse.Nodes.Entities.Unescape(System.String,System.Boolean)">
            <summary>
            Unescape the input string.
            </summary>
            <param name="s"></param>
            <param name="strict">if "strict" (that is, requires trailing ';' char, otherwise that's optional)</param>
            <returns></returns>
        </member>
        <member name="T:JetyDu.HttpParse.Nodes.Node">
            <summary>
            The base, abstract Node model. Elements, Documents, Comments etc are all Node instances.
            </summary>
            <!--
            Original Author: Jonathan Hedley, jonathan@hedley.net
            Ported to .NET by: Amir Grozki
            -->
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Node.#ctor(System.String,JetyDu.HttpParse.Nodes.Attributes)">
            <summary>
            Create a new Node.
            </summary>
            <param name="baseUri">base URI</param>
            <param name="attributes">attributes (not null, but may be empty)</param>
        </member>
        <member name="P:JetyDu.HttpParse.Nodes.Node.NodeName">
            <summary>
            Gets the node name of this node. Use for debugging purposes and not logic switching (for that, use <code>is</code> keyword).
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.Nodes.Node.Attributes">
            <summary>
            Gets all of the element's attributes.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Node.Attr(System.String)">
            <summary>
            Get an attribute's value by its key.
            </summary>
            <remarks>
            To get an absolute URL from an attribute that may be a relative URL, prefix the key with <code><b>abs</b></code>, 
            which is a shortcut to the {@link #absUrl} method. 
            E.g.: <code>string url = a.attr("abs:href");</code>
            </remarks>
            <param name="attributeKey">The attribute key.</param>
            <returns>The attribute, or empty string if not present (to avoid nulls).</returns>
            <seealso cref="P:JetyDu.HttpParse.Nodes.Node.Attributes"/>
            <seealso cref="M:JetyDu.HttpParse.Nodes.Node.HasAttr(System.String)"/>
            <seealso cref="M:JetyDu.HttpParse.Nodes.Node.AbsUrl(System.String)"/>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Node.Attr(System.String,System.String)">
            <summary>
            Set an attribute (key=value). If the attribute already exists, it is replaced.
            </summary>
            <param name="attributeKey">The attribute key.</param>
            <param name="attributeValue">The attribute value.</param>
            <returns>this (for chaining)</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Node.HasAttr(System.String)">
            <summary>
            Test if this element has an attribute.
            </summary>
            <param name="attributeKey">The attribute key to check.</param>
            <returns>true if the attribute exists, false if not.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Node.RemoveAttr(System.String)">
            <summary>
            Remove an attribute from this element.
            </summary>
            <param name="attributeKey">The attribute to remove.</param>
            <returns>this (for chaining)</returns>
        </member>
        <member name="P:JetyDu.HttpParse.Nodes.Node.BaseUri">
            <summary>
            Gets or sets the base URI of this node and all of its descendants.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Node.AbsUrl(System.String)">
            <summary>
            Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href&gt;</code> or 
            <code>&lt;img src&gt;</code>).
            E.g.: <code>String absUrl = linkEl.absUrl("href");</code>
            </summary>
            <remarks>
            If the attribute value is already absolute (i.e. it starts with a protocol, like 
            <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is 
            returned directly. Otherwise, it is treated as a URL relative to the element's <see cref="P:JetyDu.HttpParse.Nodes.Node.BaseUri"/>, and made 
            absolute using that. 
            As an alternate, you can use the <see cref="!:Attr()"/> method with the <code>abs:</code> prefix, e.g.:
            <code>String absUrl = linkEl.attr("abs:href");</code>
            </remarks>
            <param name="attributeKey">The attribute key</param>
            <returns>
            An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or 
            could not be made successfully into a URL.
            </returns>
            <seealso cref="!:Attr()"/>
            <seealso cref="T:System.Uri"/>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Node.GetChildNode(System.Int32)">
            <summary>
            Get a child node by index
            </summary>
            <param name="index">index of child node</param>
            <returns>the child node at this index.</returns>
        </member>
        <member name="P:JetyDu.HttpParse.Nodes.Node.ChildNodes">
            <summary>
            Gets this node's children. Presented as an unmodifiable list: new children can not be added, but the child nodes 
            themselves can be manipulated.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.Nodes.Node.ParentNode">
            <summary>
            Gets or sets this node's parent node.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.Nodes.Node.OwnerDocument">
            <summary>
            Gets the Document associated with this Node. 
            </summary>
            <returns>the Document associated with this Node, or null if there is no such Document.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Node.Remove">
            <summary>
            Remove (delete) this node from the DOM tree. If this node has children, they are also removed.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Node.Before(System.String)">
            <summary>
            Insert the specified HTML into the DOM before this node (i.e. as a preceding sibling).
            </summary>
            <param name="html">HTML to add before this node</param>
            <returns>this node, for chaining</returns>
            <see cref="M:JetyDu.HttpParse.Nodes.Node.After(System.String)"/>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Node.Before(JetyDu.HttpParse.Nodes.Node)">
            <summary>
            Insert the specified node into the DOM before this node (i.e. as a preceding sibling).
            </summary>
            <param name="node">node to add before this node</param>
            <returns>this node, for chaining</returns>
            <see cref="M:JetyDu.HttpParse.Nodes.Node.After(JetyDu.HttpParse.Nodes.Node)"/>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Node.After(System.String)">
            <summary>
            Insert the specified HTML into the DOM after this node (i.e. as a following sibling).
            </summary>
            <param name="html">HTML to add after this node</param>
            <returns>this node, for chaining</returns>
            <see cref="M:JetyDu.HttpParse.Nodes.Node.Before(System.String)"/>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Node.After(JetyDu.HttpParse.Nodes.Node)">
            <summary>
            Insert the specified node into the DOM after this node (i.e. as a following sibling).
            </summary>
            <param name="node">node to add after this node</param>
            <returns>this node, for chaining</returns>
            <see cref="M:JetyDu.HttpParse.Nodes.Node.Before(JetyDu.HttpParse.Nodes.Node)"/>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Node.Wrap(System.String)">
            <summary>
            Wrap the supplied HTML around this node.
            </summary>
            <param name="html">HTML to wrap around this element, e.g. <code>&lt;div class="head"&gt;&lt;/div&gt;</code>. Can be arbitrarily deep.</param>
            <returns>this node, for chaining.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Node.Unwrap">
            <summary>
            Removes this node from the DOM, and moves its children up into the node's parent. This has the effect of dropping 
            the node but keeping its children.
            
            For example, with the input html:
            <code>&lt;div&gt;One &lt;span&gt;Two &lt;b&gt;Three&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;</code> 
            Calling <code>element.Unwrap()</code> on the <code>span</code> element will result in the html: 
            <code>&lt;div&gt;One Two &lt;b&gt;Three&lt;/b&gt;</code>
            and the <code>"Two "</code> <see cref="T:JetyDu.HttpParse.Nodes.TextNode">TextNode</see> being returned.
            </summary>
            <returns>the first child of this node, after the node has been unwrapped. Null if the node had no children.</returns>
            <see cref="M:JetyDu.HttpParse.Nodes.Node.Remove"/>
            <see cref="M:JetyDu.HttpParse.Nodes.Node.Wrap(System.String)"/>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Node.ReplaceWith(JetyDu.HttpParse.Nodes.Node)">
            <summary>
            Replace this node in the DOM with the supplied node.
            </summary>
            <param name="input">in the node that will will replace the existing node.</param>
        </member>
        <member name="P:JetyDu.HttpParse.Nodes.Node.SiblingNodes">
            <summary>
            Retrieves this node's sibling nodes. Similar to <see cref="P:JetyDu.HttpParse.Nodes.Node.ChildNodes"/>, node.Parent.ChildNodes, but does not
            include this node (a node is not a sibling of itself).
            </summary>
            <returns>Node siblings. If the node has no parent, returns an empty list.</returns>
        </member>
        <member name="P:JetyDu.HttpParse.Nodes.Node.NextSibling">
            <summary>
            Gets this node's next sibling.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.Nodes.Node.PreviousSibling">
            <summary>
            Gets this node's previous sibling.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.Nodes.Node.SiblingIndex">
            <summary>
            Gets the list index of this node in its node sibling list. I.e. if this is the first node sibling, returns 0.
            </summary>
            <seealso cref="P:JetyDu.HttpParse.Nodes.Element.ElementSiblingIndex"/>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Node.Traverse(JetyDu.HttpParse.Select.NodeVisitor)">
            <summary>
            Perform a depth-first traversal through this node and its descendants.
            </summary>
            <param name="nodeVisitor">The visitor callbacks to perform on each node</param>
            <returns>This node, for chaining</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Node.OuterHtml">
            <summary>
            Get the outer HTML of this node.
            </summary>
            <returns>HTML</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Node.OuterHtmlHead(System.Text.StringBuilder,System.Int32,JetyDu.HttpParse.Nodes.OutputSettings)">
            <summary>
            Gets the outer HTML of this node.
            </summary>
            <param name="accum">accumulator to place HTML into</param>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.Node.Clone">
            <summary>
            Create a stand-alone, deep copy of this node, and all of its children. The cloned node will have no siblings or
            parent node. As a stand-alone object, any changes made to the clone or any of its children will not impact the
            original node.
            </summary>
            <remarks>
            The cloned node may be adopted into another Document or node structure using <see cref="M:JetyDu.HttpParse.Nodes.Element.AppendChild(JetyDu.HttpParse.Nodes.Node)"/>.
            </remarks>
            <returns>stand-alone cloned node</returns>
        </member>
        <member name="T:JetyDu.HttpParse.Nodes.TextNode">
            <summary>
            A text node.
            </summary>
            <!--
            Original Author: Jonathan Hedley, jonathan@hedley.net
            Ported to .NET by: Amir Grozki
            -->
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.TextNode.#ctor(System.String,System.String)">
            <summary>
            Create a new TextNode representing the supplied (unencoded) text).
            </summary>
            <param name="text">raw text</param>
            <param name="baseUri">base uri</param>
            <seealso cref="M:JetyDu.HttpParse.Nodes.TextNode.CreateFromEncoded(System.String,System.String)"/>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.TextNode.Text">
            <summary>
            Get the unencoded, normalised text content of this text node.
            </summary>
            <seealso cref="M:JetyDu.HttpParse.Nodes.TextNode.GetWholeText"/>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.TextNode.Text(System.String)">
            <summary>
            Set the text content of this text node.
            </summary>
            <param name="text">unencoded text</param>
            <returns>this, for chaining</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.TextNode.GetWholeText">
            <summary>
            Get the (unencoded) text of this text node, including any newlines and spaces present in the original.
            </summary>
            <returns>text</returns>
        </member>
        <member name="P:JetyDu.HttpParse.Nodes.TextNode.IsBlank">
            <summary>
            Test if this text node is blank -- that is, empty or only whitespace (including newlines).
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.TextNode.SplitText(System.Int32)">
            <summary>
            Split this text node into two nodes at the specified string offset. After splitting, this node will contain the 
            original text up to the offset, and will have a new text node sibling containing the text after the offset.
            </summary>
            <param name="offset">string offset point to split node at.</param>
            <returns>the newly created text node containing the text after the offset.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.TextNode.CreateFromEncoded(System.String,System.String)">
            <summary>
            Create a new TextNode from HTML encoded (aka escaped) data.
            </summary>
            <param name="encodedText">Text containing encoded HTML (e.g. &amp;lt;)</param>
            <param name="baseUri"></param>
            <returns>TextNode containing unencoded data (e.g. &lt;)</returns>
        </member>
        <member name="T:JetyDu.HttpParse.Nodes.XmlDeclaration">
            <summary>
            An XML Declaration.
            </summary>
            <!--
            Original Author: Jonathan Hedley, jonathan@hedley.net
            Ported to .NET by: Amir Grozki
            -->
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.XmlDeclaration.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Create a new XML declaration
            </summary>
            <param name="data">data</param>
            <param name="baseUri">base uri</param>
            <param name="isProcessingInstruction">is processing instruction</param>
        </member>
        <member name="P:JetyDu.HttpParse.Nodes.XmlDeclaration.NodeName">
            <summary>
            Gets the node's name.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.Nodes.XmlDeclaration.GetWholeDeclaration">
            <summary>
            Get the unencoded XML declaration.
            </summary>
            <returns>XML declaration</returns>
        </member>
        <member name="T:JetyDu.HttpParse.NSoupClient">
            <summary>
            The core public access point to the NSoup functionality.
            </summary>
            <!--
            Changed to NSoupClient due to namespace collisions.
            
            Original Author: Jonathan Hedley
            Ported to .NET by: Amir Grozki
            -->
        </member>
        <member name="M:JetyDu.HttpParse.NSoupClient.Parse(System.String,System.String)">
            <summary>
            Parse HTML into a Document. The parser will make a sensible, balanced document tree out of any HTML.
            </summary>
            <param name="html">HTML to parse</param>
            <param name="baseUri">The URL where the HTML was retrieved from. Used to resolve relative URLs to absolute URLs, that occur 
            before the HTML declares a <code>&lt;base href&gt;</code> tag.</param>
            <returns>sane HTML</returns>
        </member>
        <member name="M:JetyDu.HttpParse.NSoupClient.Parse(System.String,System.String,JetyDu.HttpParse.Parse.Parser)">
            <summary>
            Parse HTML into a Document, using the provided Parser. You can provide an alternate parser, such as a simple XML
            (non-HTML) parser.
            </summary>
            <param name="html">HTML to parse.</param>
            <param name="baseUri">The URL where the HTML was retrieved from. Used to resolve relative URLs to absolute URLs, that occur before the HTML declares a &lt;base href&gt; tag.</param>
            <param name="parser">Alternate parser to use.</param>
            <returns>Sane HTML.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.NSoupClient.Parse(System.String)">
            <summary>
            Parse HTML into a Document. As no base URI is specified, absolute URL detection relies on the HTML including a 
            <code>&lt;base href&gt;</code> tag.
            </summary>
            <param name="html">HTML to parse</param>
            <returns>Sane HTML</returns>
            <seealso cref="M:JetyDu.HttpParse.NSoupClient.Parse(System.String,System.String)"/>
        </member>
        <member name="M:JetyDu.HttpParse.NSoupClient.Connect(System.String)">
            <summary>
            Creates a new IConnection to a URL. Use to fetch and parse a HTML page.
            Use examples:
            <ul>
            <li><code>Document doc = NSoupClient.Connect("http://example.com").UserAgent("Mozilla").Data("name", "jsoup").Get();</code></li>
            <li><code>Document doc = NSoupClient.Connect("http://example.com").Cookie("auth", "token").Post();</code></li>
            </ul>
            </summary>
            <param name="url">URL to connect to. The protocol must be <code>http</code> or <code>https</code>.</param>
            <returns>the connection. You can add data, cookies, and headers; set the user-agent, referrer, method; and then execute.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.NSoupClient.Parse(System.IO.Stream,System.String,System.String)">
            <summary>
            Parse the contents of a file as HTML.
            </summary>
            <param name="filename">stream to load HTML from</param>
            <param name="charsetName">(optional) character set of file contents. Set to <code>null</code> to determine from <code>http-equiv</code> meta tag, if 
            present, or fall back to <code>UTF-8</code> (which is often safe to do).</param> 
            <param name="baseUri">The URL where the HTML was retrieved from, to resolve relative links against.</param>
            <returns>sane HTML</returns>
            <remarks>Throws an exception if the file could not be found, or read, or if the charsetName is invalid.</remarks>
        </member>
        <member name="M:JetyDu.HttpParse.NSoupClient.Parse(System.IO.Stream,System.String)">
            <summary>
            Parse the contents of a stream as HTML.
            </summary>
            <param name="filename">stream to load HTML from</param>
            <param name="charsetName">(optional) character set of file contents. Set to <code>null</code> to determine from <code>http-equiv</code> meta tag, if 
            present, or fall back to <code>UTF-8</code> (which is often safe to do).</param> 
            <returns>sane HTML</returns>
            <remarks>Throws an exception if the stream could not be read, or if the charsetName is invalid.</remarks>
        </member>
        <member name="M:JetyDu.HttpParse.NSoupClient.Parse(System.IO.FileStream,System.String)">
            <summary>
            Parse the contents of a file as HTML. The location of the file is used as the base URI to qualify relative URLs.    
            </summary>
            <param name="filename">file to load HTML from</param>
            <param name="charsetName">(optional) character set of file contents. Set to null to determine from http-equiv meta tag, if 
            present, or fall back to <code>UTF-8</code> (which is often safe to do).</param>
            <returns>sane HTML</returns>
            <remarks>if the file could not be found, or read, or if the charsetName is invalid.</remarks>
            <seealso cref="!:parse(string, string, string)"/>
        </member>
        <member name="M:JetyDu.HttpParse.NSoupClient.Parse(System.IO.Stream,System.String,System.String,JetyDu.HttpParse.Parse.Parser)">
            <summary>
            Read an input stream, and parse it to a Document. You can provide an alternate parser, such as a simple XML
            (non-HTML) parser.
            </summary>
            <param name="input">Input stream to read. Make sure to close it after parsing.</param>
            <param name="charsetName">(Optional) Character set of file contents. Set to null to determine from http-equiv meta tag, if
            present, or fall back to UTF-8 (which is often safe to do).</param>
            <param name="baseUri">The URL where the HTML was retrieved from, to resolve relative links against.</param>
            <param name="parser">Alternate parser to use.</param>
            <returns>Sane HTML</returns>
            <exception cref="T:System.IO.IOException">If the file could not be found, or read, or if the charsetName is invalid.</exception>
        </member>
        <member name="M:JetyDu.HttpParse.NSoupClient.ParseBodyFragment(System.String,System.String)">
            <summary>
            Parse a fragment of HTML, with the assumption that it forms the {@code body} of the HTML.
            </summary>
            <param name="bodyHtml">body HTML fragment</param>
            <param name="baseUri">URL to resolve relative URLs against.</param>
            <returns>sane HTML document</returns>
            <seealso cref="P:JetyDu.HttpParse.Nodes.Document.Body"/>
        </member>
        <member name="M:JetyDu.HttpParse.NSoupClient.ParseBodyFragment(System.String)">
            <summary>
            Parse a fragment of HTML, with the assumption that it forms the <code>body</code> of the HTML.
            </summary>
            <param name="bodyHtml">body HTML fragment</param>
            <returns>sane HTML document</returns>
            <seealso cref="P:JetyDu.HttpParse.Nodes.Document.Body"/>
        </member>
        <member name="M:JetyDu.HttpParse.NSoupClient.Parse(System.Uri,System.Int32)">
            <summary>
            Fetch a URL, and parse it as HTML. Provided for compatibility; in most cases use <code>Connect(string)</code> instead.
            The encoding character set is determined by the content-type header or http-equiv meta tag, or falls back to <code>UTF-8</code>.
            </summary>
            <param name="url">URL to fetch (with a GET). The protocol must be <code>http</code> or <code>https</code>.</param>
            <param name="timeoutMillis">Connection and read timeout, in milliseconds. If exceeded, IOException is thrown.</param>
            <returns>The parsed HTML.</returns>
            <seealso cref="M:JetyDu.HttpParse.NSoupClient.Connect(System.String)"/>
            <exception cref="T:JetyDu.HttpParse.HttpStatusException">If the response is not OK and HTTP response errors are not ignored.</exception>
            <exception cref="T:JetyDu.HttpParse.UnsupportedMimeTypeException">If the response mime type is not supported and those errors are not ignored.</exception>
            <exception cref="T:System.IO.IOException">If a connection or read error occurs.</exception>
        </member>
        <member name="M:JetyDu.HttpParse.NSoupClient.Clean(System.String,System.String,JetyDu.HttpParse.Safety.Whitelist)">
            <summary>
            Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted 
            tags and attributes.
            </summary>
            <param name="bodyHtml">Input untrusted HTML (body fragment)</param>
            <param name="baseUri">URL to resolve relative URLs against</param>
            <param name="whitelist">White-list of permitted HTML elements</param>
            <returns>Safe HTML (body fragment)</returns>
            <seealso cref="M:JetyDu.HttpParse.Safety.Cleaner.Clean(JetyDu.HttpParse.Nodes.Document)"/>
        </member>
        <member name="M:JetyDu.HttpParse.NSoupClient.Clean(System.String,JetyDu.HttpParse.Safety.Whitelist)">
            <summary>
            Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted 
            tags and attributes.
            </summary>
            <param name="bodyHtml">Input untrusted HTML (body fragment)</param>
            <param name="whitelist">White-list of permitted HTML elements</param>
            <returns>Safe HTML (body fragment)</returns>
            <seealso cref="M:JetyDu.HttpParse.Safety.Cleaner.Clean(JetyDu.HttpParse.Nodes.Document)"/>
        </member>
        <member name="M:JetyDu.HttpParse.NSoupClient.Clean(System.String,System.String,JetyDu.HttpParse.Safety.Whitelist,JetyDu.HttpParse.Nodes.OutputSettings)">
            <summary>
            Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of
            permitted tags and attributes.
            </summary>
            <param name="bodyHtml">Input untrusted HTML (body fragment)</param>
            <param name="baseUri">URL to resolve relative URLs against</param>
            <param name="whitelist">White-list of permitted HTML elements</param>
            <param name="outputSettings">Document output settings; use to control pretty-printing and entity escape modes</param>
            <returns>Safe HTML (body fragment)</returns>
            <see cref="M:JetyDu.HttpParse.Safety.Cleaner.Clean(JetyDu.HttpParse.Nodes.Document)"/>
        </member>
        <member name="M:JetyDu.HttpParse.NSoupClient.IsValid(System.String,JetyDu.HttpParse.Safety.Whitelist)">
            <summary>
            Test if the input HTML has only tags and attributes allowed by the Whitelist. Useful for form validation. The input HTML should 
            still be run through the cleaner to set up enforced attributes, and to tidy the output.
            </summary>
            <param name="bodyHtml">HTML to test</param>
            <param name="whitelist">whitelist to test against</param>
            <returns>true if no tags or attributes were removed; false otherwise</returns>
            <seealso cref="!:Clean(string, NSoup.Safety.Whitelist)"/>
        </member>
        <member name="T:JetyDu.HttpParse.Parse.CharacterReader">
            <summary>
            CharacterReader consumes tokens off a string. To replace the old TokenQueue.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.Parse.CharacterReader.NextIndexOf(System.Char)">
            <summary>
            Returns the number of characters between the current position and the next instance of the input char
            </summary>
            <param name="c">Scan target</param>
            <returns>Offset between current position and next instance of target. -1 if not found</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Parse.CharacterReader.NextIndexOf(System.String)">
            <summary>
            Returns the number of characters between the current position and the next instance of the input sequence
            </summary>
            <param name="seq">Scan target</param>
            <returns>Offset between current position and next instance of target. -1 if not found.</returns>
        </member>
        <member name="T:JetyDu.HttpParse.Parse.HtmlTreeBuilder">
            <summary>
            HTML Tree Builder; creates a DOM from Tokens.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.Parse.HtmlTreeBuilder.GenerateImpliedEndTags(System.String)">
            <summary>
            11.2.5.2 Closing elements that have implied end tags
            When the steps below require the UA to generate implied end tags, then, while the current node is a dd element, a 
            dt element, an li element, an option element, an optgroup element, a p element, an rp element, or an rt element, 
            the UA must pop the current node off the stack of open elements.
            </summary>
            <param name="excludeTag">If a step requires the UA to generate implied end tags but lists an element to exclude from the process, then the UA must perform the above steps as if that element was not in the above list.</param>
        </member>
        <member name="T:JetyDu.HttpParse.Parse.HtmlTreeBuilderState">
            <summary>
            The Tree Builder's current state. Each state embodies the processing for the state, and transitions to other states.
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.Parse.ParseError">
            <summary>
            A Parse Error records an error in the input HTML that occurs in either the tokenisation or the tree building phase.
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.Parse.ParseErrorList">
            <summary>
            A container for ParseErrors.
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.Parse.Parser">
            <summary>
            Parses HTML into a <see cref="T:JetyDu.HttpParse.Nodes.Document"/>. Generally best to use one of the  more convenient parse methods in <see cref="T:JetyDu.HttpParse.NSoupClient"/>.
            </summary>
            <!--
            Original Author: Jonathan Hedley, jonathan@hedley.net
            Ported to .NET by: Amir Grozki
            -->
        </member>
        <member name="M:JetyDu.HttpParse.Parse.Parser.#ctor(JetyDu.HttpParse.Parse.TreeBuilder)">
            <summary>
            Create a new Parser, using the specified TreeBuilder
            </summary>
            <param name="treeBuilder">TreeBuilder to use to parse input into Documents.</param>
        </member>
        <member name="M:JetyDu.HttpParse.Parse.Parser.TreeBuilder">
            <summary>
            Gets the TreeBuilder currently in use.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.Parse.Parser.TreeBuilder(JetyDu.HttpParse.Parse.TreeBuilder)">
            <summary>
            Update the TreeBuilder used when parsing content.
            </summary>
            <param name="treeBuilder">Current TreeBuilder</param>
            <returns>this, for chaining</returns>
        </member>
        <member name="P:JetyDu.HttpParse.Parse.Parser.IsTrackErrors">
            <summary>
            Check if parse error tracking is enabled.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.Parse.Parser.SetTrackErrors(System.Int32)">
            <summary>
            Enable or disable parse error tracking for the next parse.
            </summary>
            <param name="maxErrors">The maximum number of errors to track. Set to 0 to disable.</param>
            <returns>this, for chaining</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Parse.Parser.GetErrors">
            <summary>
            Retrieve the parse errors, if any, from the last parse.
            </summary>
            <returns>List of parse errors, up to the size of the maximum errors tracked.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Parse.Parser.Parse(System.String,System.String)">
            <summary>
            Parse HTML into a Document. 
            </summary>
            <param name="html">HTML to parse</param>
            <param name="baseUri">base URI of document (i.e. original fetch location), for resolving relative URLs.</param>
            <returns>parsed Document</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Parse.Parser.ParseFragment(System.String,JetyDu.HttpParse.Nodes.Element,System.String)">
            <summary>
            Parse a fragment of HTML into a list of nodes. The context element, if supplied, supplies parsing context.
            </summary>
            <param name="fragmentHtml">the fragment of HTML to parse</param>
            <param name="context">(optional) the element that this HTML fragment is being parsed for (i.e. for inner HTML). This provides stack context (for implicit element creation).</param>
            <param name="baseUri">base URI of document (i.e. original fetch location), for resolving relative URLs.</param>
            <returns>list of nodes parsed from the input HTML. Note that the context element, if supplied, is not modified.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Parse.Parser.ParseBodyFragment(System.String,System.String)">
            <summary>
            Parse a fragment of HTML into the <code>body</code> of a Document.
            </summary>
            <param name="bodyHtml">fragment of HTML</param>
            <param name="baseUri">base URI of document (i.e. original fetch location), for resolving relative URLs.</param>
            <returns>Document, with empty head, and HTML parsed into body</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Parse.Parser.UnescapeEntities(System.String,System.Boolean)">
            <summary>
            Utility method to unescape HTML entities from a string
            </summary>
            <param name="s">HTML escaped string</param>
            <param name="inAttribute">If the string is to be escaped in strict mode (as attributes are)</param>
            <returns>An unescaped string</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Parse.Parser.ParseBodyFragmentRelaxed(System.String,System.String)">
            <summary>
            </summary>
            <param name="bodyHtml">HTML to parse</param>
            <param name="baseUri">baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.</param>
            <returns>parsed Document</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Parse.Parser.HtmlParser">
            <summary>
            Create a new HTML parser. This parser treats input as HTML5, and enforces the creation of a normalised document,
            based on a knowledge of the semantics of the incoming tags.
            </summary>
            <returns>A new HTML parser.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Parse.Parser.XmlParser">
            <summary>
            Create a new XML parser. This parser assumes no knowledge of the incoming tags and does not treat it as HTML,
            rather creates a simple tree directly from the input.
            </summary>
            <returns>A new simple XML parser.</returns>
        </member>
        <member name="T:JetyDu.HttpParse.Parse.Tag">
            <summary>
             HTML Tag capabilities.
            </summary>
            <!--
            Original author: Jonathan Hedley, jonathan@hedley.net
            Ported to .NET by: Amir Grozki, amirgrozki@gmail.com
            -->
        </member>
        <member name="M:JetyDu.HttpParse.Parse.Tag.ValueOf(System.String)">
            <summary>
            Gets a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything.
            </summary>
            <remarks>
            Pre-defined tags (P, DIV etc) will be ==, but unknown tags are not registered and will only .Equals().
            </remarks>
            <param name="tagName">Name of tag, e.g. "p". Case insensitive.</param>
            <returns>The tag, either defined or new generic.</returns>
        </member>
        <member name="P:JetyDu.HttpParse.Parse.Tag.IsBlock">
            <summary>
            Gets if this is a block tag.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.Parse.Tag.FormatAsBlock">
            <summary>
            Gets if this tag should be formatted as a block (or as inline)
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.Parse.Tag.CanContainBlock">
            <summary>
            Gets if this tag can contain block tags.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.Parse.Tag.IsInline">
            <summary>
            Gets if this tag is an inline tag.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.Parse.Tag.IsData">
            <summary>
            Gets if this tag is a data only tag.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.Parse.Tag.IsEmpty">
            <summary>
            Gets if this is an empty tag
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.Parse.Tag.IsSelfClosing">
            <summary>
            Gets if this tag is self closing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.Parse.Tag.IsKnownTag">
            <summary>
            Gets if this is a pre-defined tag, or was auto created on parsing.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.Parse.Tag.IsKnownTag(System.String)">
            <summary>
            Check if this tagname is a known tag.
            </summary>
            <param name="tagName">name of tag</param>
            <returns>if known HTML tag</returns>
        </member>
        <member name="P:JetyDu.HttpParse.Parse.Tag.PreserveWhitespace">
            <summary>
            Gets if this tag should preserve whitespace within child text nodes.
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.Parse.Token">
            <summary>
            Parse tokens for the Tokeniser.
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.Parse.Tokeniser">
            <summary>
            Readers the input stream into tokens.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.Parse.Tokeniser.UnescapeEntities(System.Boolean)">
            <summary>
            Utility method to consume reader and unescape entities found within.
            </summary>
            <param name="inAttribute"></param>
            <returns>Unescaped string from reader</returns>
        </member>
        <member name="T:JetyDu.HttpParse.Parse.TokeniserState">
            States and Transition activations for the Tokeniser.
        </member>
        <member name="M:JetyDu.HttpParse.Parse.TokeniserState.RcDataState.Read(JetyDu.HttpParse.Parse.Tokeniser,JetyDu.HttpParse.Parse.CharacterReader)">
            handles data in title, textarea etc
        </member>
        <member name="T:JetyDu.HttpParse.Parse.TokenQueue">
            <summary>
            A character queue with parsing helpers.   
            </summary>
            <!--
            Original Author: Jonathan Hedley
            Ported to .NET by: Amir Grozki
            -->
        </member>
        <member name="M:JetyDu.HttpParse.Parse.TokenQueue.#ctor(System.String)">
            <summary>
            Create a new TokenQueue.
            </summary>
            <param name="data">string of data to back queue.</param>
        </member>
        <member name="P:JetyDu.HttpParse.Parse.TokenQueue.IsEmpty">
            <summary>
            Is the queue empty?
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.Parse.TokenQueue.Peek">
            <summary>
            Retrieves but does not remove the first character from the queue.
            </summary>
            <returns>First character, or 0 if empty.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Parse.TokenQueue.AddFirst(System.Char)">
            <summary>
            Add a character to the start of the queue (will be the next character retrieved).
            </summary>
            <param name="c">character to add</param>
        </member>
        <member name="M:JetyDu.HttpParse.Parse.TokenQueue.AddFirst(System.String)">
            <summary>
            Add a string to the start of the queue.
            </summary>
            <param name="seq">string to add.</param>
        </member>
        <member name="M:JetyDu.HttpParse.Parse.TokenQueue.Matches(System.String)">
            <summary>
            Tests if the next characters on the queue match the sequence. Case insensitive.
            </summary>
            <param name="seq">string to check queue for.</param>
            <returns>true if the next characters match.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Parse.TokenQueue.MatchesCS(System.String)">
            <summary>
            Case sensitive match test.
            </summary>
            <param name="seq">string to case sensitively check for</param>
            <returns>true if matched, false if not</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Parse.TokenQueue.MatchesAny(System.String[])">
            <summary>
            Tests if the next characters match any of the sequences. Case insensitive.
            </summary>
            <param name="seq">list of strings to case insensitively check for</param>
            <returns>true of any matched, false if none did</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Parse.TokenQueue.MatchChomp(System.String)">
            <summary>
            Tests if the queue matches the sequence (as with match), and if they do, removes the matched string from the 
            queue.
            </summary>
            <param name="seq">string to search for, and if found, remove from queue.</param>
            <returns>true if found and removed, false if not found.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Parse.TokenQueue.MatchesWhitespace">
            <summary>
            Tests if queue starts with a whitespace character.
            </summary>
            <returns>if starts with whitespace</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Parse.TokenQueue.MatchesWord">
            <summary>
            Test if the queue matches a word character (letter or digit).
            </summary>
            <returns>if matches a word character</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Parse.TokenQueue.Advance">
            <summary>
            Drops the next character off the queue.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.Parse.TokenQueue.Consume">
            <summary>
            Consume one character off queue.
            </summary>
            <returns>first character on queue.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Parse.TokenQueue.Consume(System.String)">
            <summary>
            Consumes the supplied sequence of the queue. If the queue does not start with the supplied sequence, will 
            throw an illegal state exception -- but you should be running match() against that condition.
            </summary>
            <remarks>Case insensitive.</remarks>
            <param name="seq">sequence to remove from head of queue.</param>
        </member>
        <member name="M:JetyDu.HttpParse.Parse.TokenQueue.ConsumeTo(System.String)">
            <summary>
            Pulls a string off the queue, up to but exclusive of the match sequence, or to the queue running out.
            </summary>
            <param name="seq">string to end on (and not include in return, but leave on queue). <b>Case sensitive.</b></param>
            <returns>The matched data consumed from queue.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Parse.TokenQueue.ConsumeToAny(System.String[])">
            <summary>
            Consumes to the first sequence provided, or to the end of the queue. Leaves the terminator on the queue.
            </summary>
            <param name="seq">any number of terminators to consume to. <b>Case insensitive.</b></param>
            <returns>consumed string</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Parse.TokenQueue.ChompTo(System.String)">
            <summary>
            Pulls a string off the queue (like consumeTo), and then pulls off the matched string (but does not return it).
            </summary>
            <remarks>
            If the queue runs out of characters before finding the seq, will return as much as it can (and queue will go 
            isEmpty() == true).
            </remarks>
            <param name="seq">string to match up to, and not include in return, and to pull off queue. <b>Case sensitive.</b></param>
            <returns>Data matched from queue.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Parse.TokenQueue.ChompBalanced(System.Char,System.Char)">
            <summary>
            Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three", 
            and leave " four" on the queue. Unbalanced openers and closers can be escaped (with \). Those escapes will be left 
            in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for 
            contains text strings; use unescape for that. 
            </summary>
            <param name="open">opener</param>
            <param name="close">closer</param>
            <returns>data matched from the queue</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Parse.TokenQueue.Unescape(System.String)">
            <summary>
            Unescaped a \ escaped string.
            </summary>
            <param name="input">backslash escaped string</param>
            <returns>unescaped string</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Parse.TokenQueue.ConsumeWhitespace">
            <summary>
            Pulls the next run of whitespace characters of the queue.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.Parse.TokenQueue.ConsumeWord">
            <summary>
            Retrieves the next run of word type (letter or digit) off the queue.
            </summary>
            <returns>string of word characters from queue, or empty string if none.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Parse.TokenQueue.ConsumeTagName">
            <summary>
            Consume an tag name off the queue (word or :, _, -)
            </summary>
            <returns>tag name</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Parse.TokenQueue.ConsumeElementSelector">
            <summary>
            Consume a CSS element selector (tag name, but | instead of : for namespaces, to not conflict with :pseudo selects).
            </summary>
            <returns>tag name</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Parse.TokenQueue.ConsumeCssIdentifier">
            <summary>
            onsume a CSS identifier (ID or class) off the queue (letter, digit, -, _)
            http://www.w3.org/TR/CSS2/syndata.html#value-def-identifier     
            </summary>
            <returns>identifier</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Parse.TokenQueue.ConsumeAttributeKey">
            <summary>
            Consume an attribute key off the queue (letter, digit, -, _, :")
            </summary>
            <returns>attribute key</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Parse.TokenQueue.Remainder">
            <summary>
            Consume and return whatever is left on the queue.
            </summary>
            <returns>remained of queue.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Parse.XmlTreeBuilder.PopStackToClose(JetyDu.HttpParse.Parse.Token.EndTag)">
             If the stack contains an element with this tag's name, pop up the stack to remove the first occurrence. If not
             found, skips.
            
             @param endTag
        </member>
        <member name="T:JetyDu.HttpParse.Safety.Cleaner">
            <summary>
            The whitelist based HTML cleaner. Use to ensure that end-user provided HTML contains only the elements and attributes 
            that you are expecting; no junk, and no cross-site scripting attacks!
            </summary>
            <remarks>
            The HTML cleaner parses the input as HTML and then runs it through a white-list, so the output HTML can only contain 
            HTML that is allowed by the whitelist.
            It is assumed that the input HTML is a body fragment; the clean methods only pull from the source's body, and the 
            canned white-lists only allow body contained tags.
            Rather than interacting directly with a Cleaner object, generally see the <code>Clean</code> methods in <see cref="!:NSoup"/>.
            </remarks>
        </member>
        <member name="M:JetyDu.HttpParse.Safety.Cleaner.#ctor(JetyDu.HttpParse.Safety.Whitelist)">
            <summary>
            Create a new cleaner, that sanitizes documents using the supplied whitelist.
            </summary>
            <param name="whitelist">white-list to clean with</param>
        </member>
        <member name="M:JetyDu.HttpParse.Safety.Cleaner.Clean(JetyDu.HttpParse.Nodes.Document)">
            <summary>
            Creates a new, clean document, from the original dirty document, containing only elements allowed by the whitelist. 
            The original document is not modified. Only elements from the dirt document's <code>body</code> are used.
            </summary>
            <param name="dirtyDocument">Untrusted base document to clean.</param>
            <returns>cleaned document.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Safety.Cleaner.IsValid(JetyDu.HttpParse.Nodes.Document)">
            <summary>
            Determines if the input document is valid, against the whitelist. It is considered valid if all the tags and attributes 
            in the input HTML are allowed by the whitelist.
            </summary>
            <remarks>
            This method can be used as a validator for user input forms. An invalid document will still be cleaned successfully 
            using the <see cref="M:JetyDu.HttpParse.Safety.Cleaner.Clean(JetyDu.HttpParse.Nodes.Document)"/> document. If using as a validator, it is recommended to still clean the document 
            to ensure enforced attributes are set correctly, and that the output is tidied.
            </remarks>
            <param name="dirtyDocument">document to test</param>
            <returns>true if no tags or attributes need to be removed; false if they do</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Safety.Cleaner.CopySafeNodes(JetyDu.HttpParse.Nodes.Element,JetyDu.HttpParse.Nodes.Element)">
            <summary>
            Iterates the input and copies trusted nodes (tags, attributes, text) into the destination.
            </summary>
            <param name="source">source of HTML</param>
            <param name="dest">destination element to copy into</param>
            <returns>number of discarded elements (that were considered unsafe)</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:JetyDu.HttpParse.Safety.Whitelist" -->
        <member name="P:JetyDu.HttpParse.Safety.Whitelist.None">
            <summary>
            This whitelist allows only text nodes: all HTML will be stripped.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.Safety.Whitelist.SimpleText">
            <summary>
            This whitelist allows only simple text formatting: <code>b, em, i, strong, u</code>. All other HTML (tags and attributes) will be removed.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.Safety.Whitelist.Basic">
            <summary>
            This whitelist allows a fuller range of text nodes: <code>a, b, blockquote, br, cite, code, dd, dl, dt, em, i, li, 
            ol, p, pre, q, small, strike, strong, sub, sup, u, ul</code>, and appropriate attributes.
            </summary>
            <remarks>
            Links (<code>a</code> elements) can point to <code>http, https, ftp, mailto</code>, and have an enforced 
            <code>rel=nofollow</code> attribute. 
            Does not allow images.
            </remarks>
        </member>
        <member name="P:JetyDu.HttpParse.Safety.Whitelist.BasicWithImages">
            <summary>
            This whitelist allows the same text tags as {@link #basic}, and also allows <code>img</code> tags, with appropriate 
            attributes, with <code>src</code> pointing to <code>http</code> or <code>https</code>.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.Safety.Whitelist.Relaxed">
            <summary>
            This whitelist allows a full range of text and structural body HTML: <code>a, b, blockquote, br, caption, cite, 
            code, col, colgroup, dd, dl, dt, em, h1, h2, h3, h4, h5, h6, i, img, li, ol, p, pre, q, small, strike, strong, sub, 
            sup, table, tbody, td, tfoot, th, thead, tr, u, ul</code> 
            </summary>
            <remarks>Links do not have an enforced <code>rel=nofollow</code> attribute, but you can add that if desired.</remarks>
        </member>
        <member name="M:JetyDu.HttpParse.Safety.Whitelist.#ctor">
            <summary>
            Create a new, empty whitelist. Generally it will be better to start with a default prepared whitelist instead.
            </summary>
            <seealso cref="P:JetyDu.HttpParse.Safety.Whitelist.Basic"/>
            <seealso cref="P:JetyDu.HttpParse.Safety.Whitelist.BasicWithImages"/>
            <seealso cref="P:JetyDu.HttpParse.Safety.Whitelist.SimpleText"/>
            <seealso cref="P:JetyDu.HttpParse.Safety.Whitelist.Relaxed"/>
        </member>
        <member name="M:JetyDu.HttpParse.Safety.Whitelist.AddTags(System.String[])">
            <summary>
            Add a list of allowed elements to a whitelist. (If a tag is not allowed, it will be removed from the HTML.)
            </summary>
            <param name="tags">tag names to allow</param>
            <returns>this (for chaining)</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Safety.Whitelist.AddAttributes(System.String,System.String[])">
            <summary>
            Add a list of allowed attributes to a tag. (If an attribute is not allowed on an element, it will be removed.)
            E.g.: AddAttributes("a", "href", "class") allows href and class attributes on a tags.
            </summary>
            <remarks>
            To make an attribute valid for <b>all tags</b>, use the pseudo tag <code>:all</code>, e.g. 
            <code>AddAttributes(":all", "class")</code>.
            </remarks>
            <param name="tag">The tag the attributes are for. The tag will be added to the allowed tag list if necessary.</param>
            <param name="keys">List of valid attributes for the tag.</param>
            <returns>This (for chaining)</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Safety.Whitelist.AddEnforcedAttribute(System.String,System.String,System.String)">
            <summary>
            Add an enforced attribute to a tag. An enforced attribute will always be added to the element. If the element 
            already has the attribute set, it will be overridden.
            </summary>
            <remarks>E.g.: <code>AddEnforcedAttribute("a", "rel", "nofollow")</code> will make all <code>a</code> tags output as 
            <code>&lt;a href="..." rel="nofollow"&gt;</code></remarks>
            <param name="tag">The tag the enforced attribute is for. The tag will be added to the allowed tag list if necessary.</param>
            <param name="key">The attribute key</param>
            <param name="value">The enforced attribute value</param>
            <returns>this (for chaining)</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Safety.Whitelist.PreserveRelativeLinks(System.Boolean)">
            <summary>
            Configure this Whitelist to preserve relative links in an element's URL attribute, or convert them to absolute
            links. By default, this is false: URLs will be  made absolute (e.g. start with an allowed protocol, like
            e.g. "http://".
            
            Note that when handling relative links, the input document must have an appropriate base URI set when
            parsing, so that the link's protocol can be confirmed. Regardless of the setting of the preserve relative
            links option, the link must be resolvable against the base URI to an allowed protocol; otherwise the attribute
            will be removed.
            </summary>
            <param name="preserve">True to allow relative links, false (default) to deny</param>
            <returns>This Whitelist, for chaining.</returns>
            <see cref="!:AddProtocols()"/>
        </member>
        <member name="M:JetyDu.HttpParse.Safety.Whitelist.AddProtocols(System.String,System.String,System.String[])">
            <summary>
            Add allowed URL protocols for an element's URL attribute. This restricts the possible values of the attribute to 
            URLs with the defined protocol.
            </summary>
            <remarks>E.g.: <code>AddProtocols("a", "href", "ftp", "http", "https")</code></remarks>
            <param name="tag">Tag the URL protocol is for</param>
            <param name="key">Attribute key</param>
            <param name="protocols">List of valid protocols</param>
            <returns>this, for chaining</returns>
        </member>
        <member name="T:JetyDu.HttpParse.Select.Collector">
            <summary>
            Collects a list of elements that match the supplied criteria.
            </summary>
            <!--
            Original Author: Jonathan Hedley
            Ported to .NET by: Amir Grozki
            -->
        </member>
        <member name="M:JetyDu.HttpParse.Select.Collector.Collect(JetyDu.HttpParse.Select.Evaluator,JetyDu.HttpParse.Nodes.Element)">
            <summary>
            Build a list of elements, by visiting root and every descendant of root, and testing it against the evaluator.
            </summary>
            <param name="eval">Evaluator to test elements against</param>
            <param name="root">root of tree to descend</param>
            <returns>list of matches; empty if none</returns>
        </member>
        <member name="T:JetyDu.HttpParse.Select.CombiningEvaluator">
            <summary>
            Base combining (and, or) evaluator.
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.Select.Elements">
            <summary>
            A list of {@link Element Elements}, with methods that act on every element in the list
            
            To get an Elements object, use the <see cref="M:JetyDu.HttpParse.Nodes.Element.Select(System.String)"/> method.
            </summary>
            <!--
            Original Author: Jonathan Hedley, jonathan@hedley.net
            Ported to .NET by: Amir Grozki
            -->
        </member>
        <member name="M:JetyDu.HttpParse.Select.Elements.Attr(System.String)">
            <summary>
            Get an attribute value from the first matched element that has the attribute.
            </summary>
            <param name="attributeKey">The attribute key.</param>
            <returns>The attribute value from the first matched element that has the attribute.. If no elements were matched (isEmpty() == true), 
            or if the no elements have the attribute, returns empty string.</returns>
            <seealso cref="M:JetyDu.HttpParse.Select.Elements.HasAttr(System.String)"/>
        </member>
        <member name="M:JetyDu.HttpParse.Select.Elements.HasAttr(System.String)">
            <summary>
            Checks if any of the matched elements have this attribute set.
            </summary>
            <param name="attributeKey">attribute key</param>
            <returns>true if any of the elements have the attribute; false if none do.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Select.Elements.Attr(System.String,System.String)">
            <summary>
            Set an attribute on all matched elements.
            </summary>
            <param name="attributeKey">attribute key</param>
            <param name="attributeValue">attribute value</param>
            <returns>this</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Select.Elements.RemoveAttr(System.String)">
            <summary>
            Remove an attribute from every matched element.
            </summary>
            <param name="attributeKey">The attribute to remove.</param>
            <returns>this (for chaining)</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Select.Elements.AddClass(System.String)">
            <summary>
            Add the class name to every matched element's <code>class</code> attribute.
            </summary>
            <param name="className">class name to add</param>
            <returns>this</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Select.Elements.RemoveClass(System.String)">
            <summary>
            Remove the class name from every matched element's <code>class</code> attribute, if present.
            </summary>
            <param name="className">class name to remove</param>
            <returns>this</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Select.Elements.ToggleClass(System.String)">
            <summary>
            Toggle the class name on every matched element's <code>class</code> attribute.
            </summary>
            <param name="className">class name to add if missing, or remove if present, from every element.</param>
            <returns>this</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Select.Elements.HasClass(System.String)">
            <summary>
            Determine if any of the matched elements have this class name set in their <code>class</code> attribute.
            </summary>
            <param name="className">class name to check for</param>
            <returns>true if any do, false if none do</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Select.Elements.Val">
            <summary>
            Get the form element's value of the first matched element.
            </summary>
            <returns>The form element's value, or empty if not set.</returns>
            <seealso cref="M:JetyDu.HttpParse.Nodes.Element.Val"/>
        </member>
        <member name="M:JetyDu.HttpParse.Select.Elements.Val(System.String)">
            <summary>
            Set the form element's value in each of the matched elements.
            </summary>
            <param name="value">The value to set into each matched element</param>
            <returns>this (for chaining)</returns>
        </member>
        <member name="P:JetyDu.HttpParse.Select.Elements.Text">
            <summary>
            Gets the combined text of all the matched elements.
            </summary>
            <remarks>
            Note that it is possible to get repeats if the matched elements contain both parent elements and their own 
            children, as the Element.Text method returns the combined text of a parent and all its children.
            </remarks>
            <seealso cref="M:JetyDu.HttpParse.Nodes.Element.Text"/>
        </member>
        <member name="M:JetyDu.HttpParse.Select.Elements.Html">
            <summary>
            Gets the combined inner HTML of all matched elements.
            </summary>
            <seealso cref="P:JetyDu.HttpParse.Select.Elements.Text" />
            <seealso cref="M:JetyDu.HttpParse.Select.Elements.OuterHtml"/>
        </member>
        <member name="M:JetyDu.HttpParse.Select.Elements.Html(System.String)">
            <summary>
            Set the inner HTML of each matched element.
            </summary>
            <param name="html">HTML to parse and set into each matched element.</param>
            <returns>this, for chaining</returns>
            <seealso cref="M:JetyDu.HttpParse.Nodes.Element.Html(System.String)"/>
        </member>
        <member name="M:JetyDu.HttpParse.Select.Elements.OuterHtml">
            <summary>
            Get the combined outer HTML of all matched elements.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.Select.Elements.ToString">
            <summary>
            Get the combined outer HTML of all matched elements. Alias of <see cref="M:JetyDu.HttpParse.Select.Elements.OuterHtml"/>.
            </summary>
            <returns>string of all element's outer HTML.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:JetyDu.HttpParse.Select.Elements.TagName(System.String)" -->
        <member name="M:JetyDu.HttpParse.Select.Elements.Prepend(System.String)">
            <summary>
            Add the supplied HTML to the start of each matched element's inner HTML.
            </summary>
            <param name="html">HTML to add inside each element, before the existing HTML</param>
            <returns>this, for chaining</returns>
            <seealso cref="M:JetyDu.HttpParse.Nodes.Element.Prepend(System.String)"/>
        </member>
        <member name="M:JetyDu.HttpParse.Select.Elements.Append(System.String)">
            <summary>
            Add the supplied HTML to the end of each matched element's inner HTML.
            </summary>
            <param name="html">HTML to add inside each element, after the existing HTML</param>
            <returns>this, for chaining</returns>
            <seealso cref="M:JetyDu.HttpParse.Nodes.Element.Append(System.String)"/>
        </member>
        <member name="M:JetyDu.HttpParse.Select.Elements.Before(System.String)">
            <summary>
            Insert the supplied HTML before each matched element's outer HTML.
            </summary>
            <param name="html">HTML to insert before each element</param>
            <returns>this, for chaining</returns>
            <seealso cref="M:JetyDu.HttpParse.Nodes.Element.Before(System.String)"/>
        </member>
        <member name="M:JetyDu.HttpParse.Select.Elements.after(System.String)">
            <summary>
            Insert the supplied HTML after each matched element's outer HTML.
            </summary>
            <param name="html">HTML to insert after each element</param>
            <returns>this, for chaining</returns>
            <seealso cref="M:JetyDu.HttpParse.Nodes.Element.After(System.String)"/>
        </member>
        <member name="M:JetyDu.HttpParse.Select.Elements.Wrap(System.String)">
            <summary>
            Wrap the supplied HTML around each matched elements. For example, with HTML 
            <code>&lt;p&gt;&lt;b&gt;This&lt;/b&gt; is &lt;b&gt;Jsoup&lt;/b&gt;&lt;/p&gt;</code>,
            <code>doc.select("b").wrap("&lt;i&gt;&lt;/i&gt;");</code> 
            becomes <code>&lt;p&gt;&lt;i&gt;&lt;b&gt;This&lt;/b&gt;&lt;/i&gt; is &lt;i&gt;&lt;b&gt;jsoup&lt;/b&gt;&lt;/i&gt;&lt;/p&gt;</code>
            </summary>
            <param name="html">HTML to wrap around each element, e.g. <code>&lt;div class="head"&gt;&lt;/div&gt;</code>. Can be arbitrarily deep.</param>
            <returns>this (for chaining)</returns>
            <seealso cref="!:Element.Wrap()"/>
        </member>
        <member name="M:JetyDu.HttpParse.Select.Elements.Unwrap">
            <summary>
            Removes the matched elements from the DOM, and moves their children up into their parents. This has the effect of 
            dropping the elements but keeping their children.
            
            This is useful for e.g removing unwanted formatting elements but keeping their contents.
            
            E.g. with HTML: <code>&lt;div&gt;&lt;font&gt;One&lt;/font&gt; &lt;font&gt;&lt;a href="/"&gt;Two&lt;/a&gt;&lt;/font&gt;&lt;/div&gt;</code>
            <code>doc.Select("font").Unwrap();</code>
            HTML = <code>&lt;div&gt;One &lt;a href="/"&gt;Two&lt;/a&gt;&lt;/div&gt;</code>
            </summary>
            <returns>this (for chaining)</returns>
            <see cref="M:JetyDu.HttpParse.Nodes.Node.Unwrap"/>
        </member>
        <member name="M:JetyDu.HttpParse.Select.Elements.Empty">
            <summary>
            Empty (remove all child nodes from) each matched element. This is similar to setting the inner HTML of each 
            element to nothing.
            E.g. HTML: <code>&lt;div&gt;&lt;p&gt;Hello &lt;b&gt;there&lt;/b&gt;&lt;/p&gt; &lt;p&gt;now&lt;/p&gt;&lt;/div&gt;&lt;br&gt;</code>
            <code>doc.Select("p").Empty();</code>
            HTML = <code>&lt;div&gt;&lt;p&gt;&lt;/p&gt; &lt;p&gt;&lt;/p&gt;&lt;/div&gt;</code>
            </summary>
            <returns>this, for chaining</returns>
            <seealso cref="M:JetyDu.HttpParse.Nodes.Element.Empty"/>
            <seealso cref="M:JetyDu.HttpParse.Select.Elements.Remove"/>
        </member>
        <member name="M:JetyDu.HttpParse.Select.Elements.Remove">
            <summary>
            Remove each matched element from the DOM. This is similar to setting the outer HTML of each element to nothing.
            E.g. HTML: <code>&lt;div&gt;&lt;p&gt;Hello&lt;/p&gt; &lt;p&gt;there&lt;/p&gt; &lt;img /&gt;&lt;/div&gt;</code>
            <code>doc.Select("p").Remove();</code>
            HTML = <code>&lt;div&gt; &lt;img /&gt;&lt;/div&gt;</code>
            </summary>
            <remarks>
            Note that this method should not be used to clean user-submitted HTML; rather, use <see cref="!:Cleaner"/> to clean HTML. 
            </remarks>
            <returns>this, for chaining</returns>
            <seealso cref="M:JetyDu.HttpParse.Nodes.Element.Empty"/>
            <seealso cref="M:JetyDu.HttpParse.Select.Elements.Empty"/>
        </member>
        <member name="M:JetyDu.HttpParse.Select.Elements.Select(System.String)">
            <summary>
            Find matching elements within this element list.
            </summary>
            <param name="query">A <see cref="T:JetyDu.HttpParse.Select.Selector"/> query</param>
            <returns>the filtered list of elements, or an empty list if none match.</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Select.Elements.Not(System.String)">
            <summary>
            Remove elements from this list that match the <see cref="T:JetyDu.HttpParse.Select.Selector"/> query.
            E.g. HTML: <code>&lt;div class=logo&gt;One&lt;/div&gt; &lt;div&gt;Two&lt;/div&gt;</code>
            <code>Elements divs = doc.Select("div").Not("#logo");</code>
            Result: <code>divs: [&lt;div&gt;Two&lt;/div&gt;]</code>
            </summary>
            <param name="query">query the selector query whose results should be removed from these elements</param>
            <returns>a new elements list that contains only the filtered results</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Select.Elements.Eq(System.Int32)">
            <summary>
            Get the <i>nth</i> matched element as an Elements object.
            </summary>
            <param name="index">the (zero-based) index of the element in the list to retain</param>
            <returns>Elements containing only the specified element, or, if that element did not exist, an empty list.</returns>
            <seealso cref="!:Get(int)"/>
        </member>
        <member name="M:JetyDu.HttpParse.Select.Elements.Is(System.String)">
            <summary>
            Test if any of the matched elements match the supplied query.
            </summary>
            <param name="query">A selector</param>
            <returns>true if at least one element in the list matches the query.</returns>
        </member>
        <member name="P:JetyDu.HttpParse.Select.Elements.Parents">
            <summary>
            Gets all of the parents and ancestor elements of the matched elements.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.Select.Elements.First">
            <summary>
            Gets the first matched element or <code>null</code> if contents is empty.
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.Select.Elements.Last">
            <summary>
            Gets the last matched element or <code>null</code> if contents is empty.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.Select.Elements.Traverse(JetyDu.HttpParse.Select.NodeVisitor)">
            <summary>
            Perform a depth-first traversal on each of the selected elements.
            </summary>
            <param name="nodeVisitor">The visitor callbacks to perform on each node</param>
            <returns>This, for chaining</returns>
        </member>
        <member name="T:JetyDu.HttpParse.Select.Evaluator">
            <summary>
            Evaluates that an element matches the selector.
            </summary>
            <!--
            Original Author: Jonathan Hedley
            Ported to .NET by: Amir Grozki
            -->
        </member>
        <member name="M:JetyDu.HttpParse.Select.Evaluator.Matches(JetyDu.HttpParse.Nodes.Element,JetyDu.HttpParse.Nodes.Element)">
            <summary>
            Test if the element meets the evaluator's requirements.
            </summary>
            <param name="root">Root of the matching subtree</param>
            <param name="element">tested element</param>
            <returns></returns>
        </member>
        <member name="T:JetyDu.HttpParse.Select.Evaluator.Tag">
            <summary>
            Evaluator for tag name
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.Select.Evaluator.Id">
            <summary>
            Evaluator for element id
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.Select.Evaluator.Class">
            <summary>
            Evaluator for element class
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.Select.Evaluator.Attribute">
            <summary>
            Evaluator for attribute name matching
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.Select.Evaluator.AttributeStarting">
            <summary>
            Evaluator for attribute name prefix matching
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.Select.Evaluator.AttributeWithValue">
            <summary>
            Evaluator for attribute name/value matching
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.Select.Evaluator.AttributeWithValueNot">
            <summary>
            Evaluator for attribute name != value matching
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.Select.Evaluator.AttributeWithValueStarting">
            <summary>
            Evaluator for attribute name/value matching (value prefix)
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.Select.Evaluator.AttributeWithValueEnding">
            <summary>
            Evaluator for attribute name/value matching (value ending)
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.Select.Evaluator.AttributeWithValueContaining">
            <summary>
            Evaluator for attribute name/value matching (value containing)
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.Select.Evaluator.AttributeWithValueMatching">
            <summary>
            Evaluator for attribute name/value matching (value regex matching)
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.Select.Evaluator.AttributeKeyPair">
            <summary>
            Abstract evaluator for attribute name/value matching
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.Select.Evaluator.AllElements">
            <summary>
            Evaluator for any / all element matching
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:JetyDu.HttpParse.Select.Evaluator.IndexLessThan" -->
        <member name="T:JetyDu.HttpParse.Select.Evaluator.IndexGreaterThan">
            <summary>
            Evaluator for matching by sibling index number (e > idx)
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.Select.Evaluator.IndexEquals">
            <summary>
            Evaluator for matching by sibling index number (e = idx)
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.Select.Evaluator.IndexEvaluator">
            <summary>
            Abstract evaluator for sibling index matching
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.Select.Evaluator.ContainsText">
            <summary>
            Evaluator for matching Element (and its descendants) text
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.Select.Evaluator.ContainsOwnText">
            <summary>
            Evaluator for matching Element's own text
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.Select.Evaluator.MatchesRegex">
            <summary>
            Evaluator for matching Element (and its descendants) text with regex
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.Select.Evaluator.MatchesOwn">
            <summary>
            Evaluator for matching Element's own text with regex
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.Select.NodeTraversor">
            <summary>
            Depth-first node traversor. Use to iterate through all nodes under and including the specified root node.
            This implementation does not use recursion, so a deep DOM does not risk blowing the stack.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.Select.NodeTraversor.#ctor(JetyDu.HttpParse.Select.NodeVisitor)">
            <summary>
            Create a new traversor.
            </summary>
            <param name="visitor">A class implementing the NodeVisitor interface, to be called when visiting each node.</param>
        </member>
        <member name="M:JetyDu.HttpParse.Select.NodeTraversor.Traverse(JetyDu.HttpParse.Nodes.Node)">
            <summary>
            Start a depth-first traverse of the root and all of its descendants.
            </summary>
            <param name="root">The root node point to traverse.</param>
        </member>
        <member name="T:JetyDu.HttpParse.Select.NodeVisitor">
            <summary>
            Node visitor interface. Provide an implementing class to NodeTraversor to iterate through nodes.
            This interface provides two methods, Head() and Tail(). The head method is called when the node is first
            seen, and the tail method when all of the node's children have been visited. As an example, head can be used to
            create a start tag for a node, and tail to create the end tag.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.Select.NodeVisitor.Head(JetyDu.HttpParse.Nodes.Node,System.Int32)">
            <summary>
            Callback for when a node is first visited.
            </summary>
            <param name="node">The node being visited.</param>
            <param name="depth">The depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node
            of that will have depth 1.</param>
        </member>
        <member name="M:JetyDu.HttpParse.Select.NodeVisitor.Tail(JetyDu.HttpParse.Nodes.Node,System.Int32)">
            <summary>
            Callback for when a node is last visited, after all of its descendants have been visited.
            </summary>
            <param name="node">The node being visited.</param>
            <param name="depth">the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node
            of that will have depth 1.</param>
        </member>
        <member name="T:JetyDu.HttpParse.Select.QueryParser">
            <summary>
            Parses a CSS selector into an Evaluator tree.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.Select.QueryParser.#ctor(System.String)">
            <summary>
            Create a new QueryParser.
            </summary>
            <param name="query">query CSS query</param>
        </member>
        <member name="M:JetyDu.HttpParse.Select.QueryParser.Parse(System.String)">
            <summary>
            Parse a CSS query into an Evaluator.
            </summary>
            <param name="query">query CSS query</param>
            <returns>Evaluator</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Select.QueryParser.Parse">
            <summary>
            Parse the query
            </summary>
            <returns>Evaluator</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:JetyDu.HttpParse.Select.Selector" -->
        <member name="M:JetyDu.HttpParse.Select.Selector.Select(System.String,JetyDu.HttpParse.Nodes.Element)">
            <summary>
            Find elements matching selector.
            </summary>
            <param name="query">CSS selector</param>
            <param name="root">root element to descend into</param>
            <returns>matching elements, empty if not</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Select.Selector.Select(System.String,System.Collections.Generic.IEnumerable{JetyDu.HttpParse.Nodes.Element})">
            <summary>
            Find elements matching selector.
            </summary>
            <param name="query">CSS selector</param>
            <param name="roots">root elements to descend into</param>
            <returns>matching elements, empty if not</returns>
        </member>
        <member name="T:JetyDu.HttpParse.Select.StructuralEvaluator">
            <summary>
            Base structural evaluator.
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.UnsupportedMimeTypeException">
            <summary>
            Signals that a HTTP response returned a mime type that is not supported.
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.HttpHelper">
            <summary>
            Http请求操作类 
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.HttpHelper._request">
            <summary>
            HttpWebRequest对象用来发起请求
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.HttpHelper._response">
            <summary>
            获取响应流的数据对象
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.HttpHelper._result">
            <summary>
            结果参数
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.HttpHelper._stream">
            <summary>
            应答结果承载的内存流
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.HttpHelper._rawResponse">
            <summary>
            承载读取数据流
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.HttpHelper.GetDocument(JetyDu.HttpParse.HttpItem)">
            <summary>
            采用httpwebrequest方式访问网络,根据传入的URl地址，得到响应的HtmlDocument。
            </summary>
            <param name="objHttpItems"></param>
            <returns>HtmlDocument</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HttpHelper.GetDocument(JetyDu.HttpParse.HttpItem,System.String@)">
            <summary>
            采用httpwebrequest方式访问网络,根据传入的URl地址，得到响应的HtmlDocument。
            </summary>
            <param name="objHttpItems"></param>
            <param name="cookie">自动维护的字符串cookie</param>
            <returns>HtmlDocument</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HttpHelper.GetHtml(JetyDu.HttpParse.HttpItem,System.String@)">
            <summary>
            采用httpwebrequest方式访问网络,根据传入的URl地址，得到响应的数据字符串。
            </summary>
            <param name="objHttpItems">参数列表</param>
            <param name="cookie">自动维护的字符串cookie</param>
            <returns>HttpResults 为返回结果</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HttpHelper.GetHtml(JetyDu.HttpParse.HttpItem)">
            <summary>
            采用httpwebrequest方式访问网络,根据传入的URl地址，得到响应的数据字符串。
            </summary>
            <param name="objHttpItems">参数列表</param>
            <returns>HttpResults 为返回结果</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HttpHelper.GetHttpRequestData(JetyDu.HttpParse.HttpItem)">
            <summary>
            根据传入的数据，得到相应页面数据
            </summary>
            <param name="objHttpItems">请求设置参数</param>
            <returns>请求结果</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HttpHelper.GetHttpRequestDataAsync(JetyDu.HttpParse.HttpItem)">
            <summary>
            根据传入的数据，得到相应页面数据 异步
            </summary>
            <param name="objHttpItems">请求设置参数</param>
            <returns>请求结果</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HttpHelper.GetResponesInfo(JetyDu.HttpParse.HttpItem@)">
            <summary>
            处理响应结果
            </summary>
            <param name="objHttpItems">请求设置参数</param>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.HttpHelper.GetEncodingNew(JetyDu.HttpParse.HttpItem@)">
            <summary>
            识别编码
            </summary>
            <param name="objHttpItems"></param>
        </member>
        <member name="M:JetyDu.HttpParse.HttpHelper.GetHtmlAsync(JetyDu.HttpParse.HttpItem)">
            <summary>
            采用异步方式访问网络,根据传入的URl地址，得到响应的数据字符串。
            </summary>
            <param name="objHttpItems">参数列表</param>
        </member>
        <member name="M:JetyDu.HttpParse.HttpHelper.GetDocumentAsync(JetyDu.HttpParse.HttpItem)">
            <summary>
            采用httpwebrequest方式访问网络,根据传入的URl地址，得到响应的HtmlDocument。
            </summary>
            <param name="objHttpItems"></param>
            <returns>HtmlDocument</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HttpHelper.GetMemoryStream(System.IO.Stream)">
            <summary>
            获取流中的数据转换为内存流处理
            </summary>
            <param name="streamResponse">流</param>
        </member>
        <member name="M:JetyDu.HttpParse.HttpHelper.SetRequest(JetyDu.HttpParse.HttpItem)">
             <summary>
             为请求准备参数
             </summary>
            <param name="objHttpItems">参数列表</param> 
        </member>
        <member name="M:JetyDu.HttpParse.HttpHelper.SetCer(JetyDu.HttpParse.HttpItem)">
            <summary>
            设置证书
            </summary>
            <param name="objHttpItems">请求设置参数</param>
        </member>
        <member name="M:JetyDu.HttpParse.HttpHelper.SetEncoding(JetyDu.HttpParse.HttpItem)">
            <summary>
            设置编码
            </summary>
            <param name="objHttpItems">Http参数</param>
        </member>
        <member name="M:JetyDu.HttpParse.HttpHelper.SetCookie(JetyDu.HttpParse.HttpItem)">
            <summary>
            设置Cookie
            </summary>
            <param name="objHttpItems">Http参数</param>
        </member>
        <member name="M:JetyDu.HttpParse.HttpHelper.SetPostData(JetyDu.HttpParse.HttpItem)">
            <summary>
            设置Post数据
            </summary>
            <param name="objHttpItems">Http参数</param>
        </member>
        <member name="M:JetyDu.HttpParse.HttpHelper.SetProxy(JetyDu.HttpParse.HttpItem)">
            <summary>
            设置代理
            </summary>
            <param name="objHttpItems">参数对象</param>
        </member>
        <member name="M:JetyDu.HttpParse.HttpHelper.CheckValidationResult(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            回调验证证书问题
            </summary>
            <param name="sender">流对象</param>
            <param name="certificate">证书</param>
            <param name="chain">X509Chain</param>
            <param name="errors">SslPolicyErrors</param>
            <returns>bool</returns>
        </member>
        <member name="M:JetyDu.HttpParse.HttpHelper.GetUrl(System.String)">
            <summary>
            传入一个正确或不正确的URl，返回正确的URL
            </summary>
            <param name="URL">url</param>
            <returns>
            </returns>
        </member>
        <member name="M:JetyDu.HttpParse.HttpHelper.GetImg(JetyDu.HttpParse.HttpResult)">
            <summary>
            读取返回对象中数据,并返回Image格式图片
            </summary>
            <param name="hr">GetHtml后的请求结果</param>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.HttpHelper.GetImg(JetyDu.HttpParse.HttpItem)">
            <summary>
            读取网页url中的图像数据
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.HttpHelper.ByteArrayToImage(System.Byte[])">
            <summary>
            字节数组生成图片
            </summary>
            <param name="Bytes">字节数组</param>
            <returns>图片</returns>
        </member>
        <member name="T:JetyDu.HttpParse.HttpItem">
            <summary>
            Http请求参考类
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.HttpItem.Encoding">
            <summary>
                默认的编码类型,如果不初始化,则为null,每次自动识别
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.HttpItem._expect100Continue">
            <summary>
                当该属性设置为 true 时，使用 POST 方法的客户端请求应该从服务器收到 100-Continue 响应，以指示客户端应该发送要发送的数据。此机制使客户端能够在服务器根据请求报头打算拒绝请求时，避免在网络上发送大量的数据
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.HttpItem.AddHeader(System.String,System.String)">
            <summary>
            添加请求头
            </summary>
            <param name="key"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="P:JetyDu.HttpParse.HttpItem.Url">
            <summary>
                请求URL必须填写
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HttpItem.Method">
            <summary>
                请求方式默认为GET方式
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HttpItem.Timeout">
            <summary>
                默认请求超时时间,单位 /毫秒
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HttpItem.ReadWriteTimeout">
            <summary>
                默认写入Post数据超时间
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HttpItem.Accept">
            <summary>
                请求标头值 默认为image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, application/x-shockwave-flash,
                application/vnd.ms-excel, application/vnd.ms-powerpoint, application/msword, */*
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HttpItem.ContentType">
            <summary>
                请求返回类型默认 application/x-www-form-urlencoded
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HttpItem.UserAgent">
            <summary>
                客户端访问信息默认Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.9
                Safari/537.36
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HttpItem.PostEncoding">
            <summary>
                Post数据时的编码 默认为 Default,如需必要 请勿修改
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HttpItem.EncodingStr">
            <summary>
                返回数据编码默认为NUll,可以自动识别
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HttpItem.PostDataType">
            <summary>
                Post的数据类型
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HttpItem.Postdata">
            <summary>
                Post请求时要发送的字符串Post数据
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HttpItem.PostdataByte">
            <summary>
                Post请求时要发送的Byte类型的Post数据
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HttpItem.CookieCollection">
            <summary>
                Cookie对象集合
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HttpItem.Container">
            <summary>
                自动处理cookie
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HttpItem.Cookie">
            <summary>
                请求时的Cookie
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HttpItem.Referer">
            <summary>
                来源地址，上次访问地址
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HttpItem.CerPath">
            <summary>
                证书绝对路径
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HttpItem.CerPass">
            <summary>
                证书密码
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HttpItem.IsToLower">
            <summary>
                是否设置为全文小写
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HttpItem.IsAjax">
            <summary>
                是否增加异步请求头
                对应协议 : x-requested-with: XMLHttpRequest
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HttpItem.Allowautoredirect">
            <summary>
                支持跳转页面，查询结果将是跳转后的页面
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HttpItem.AutoRedirectMax">
            <summary>
                如果返回内容为 : 尝试自动重定向的次数太多 请设置本属性为true
                同时应注意设置超时时间(默认15s)
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HttpItem.Expect100Continue">
            <summary>
                当该属性设置为 true 时，使用 POST 方法的客户端请求应该从服务器收到 100-Continue 响应，以指示客户端应该发送要发送的数据。此机制使客户端能够在服务器根据请求报头打算拒绝请求时，避免在网络上发送大量的数据
                默认False
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HttpItem.Connectionlimit">
            <summary>
                最大连接数
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HttpItem.ProxyUserName">
            <summary>
                代理Proxy 服务器用户名
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HttpItem.ProxyPwd">
            <summary>
                代理 服务器密码
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HttpItem.ProxyIp">
            <summary>
                代理 服务IP
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HttpItem.ResultType">
            <summary>
                设置返回类型String和Byte
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HttpItem.Header">
            <summary>
                头数据
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HttpItem.HeaderStr">
            <summary>
                字符串头
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HttpItem.UseUnsafe">
            <summary>
                如果提示以下错误,请设置为true
                服务器提交了协议冲突. Section=ResponseHeader Detail=CR 后面必须是 LF
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HttpItem.IsEofError">
            <summary>
                如果提示以下错误,请设置为true
                从传输流收到意外的 EOF 或 0 个字节
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HttpItem.IsSo">
            <summary>
                是否为So模式
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HttpItem.UpLoadPath">
            <summary>
                文件上传路径
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HttpItem.IsGetImage">
            <summary>
                是否请求图片
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HttpItem.UseStringCookie">
            <summary>
                是否使用字符串Cookie
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HttpItem.SecProtocolTypeEx">
            <summary>
                Https时的传输协议.
                替代原始SecurityProtocolType;
                包含四个版本(Ssl3 Tls Tls1.1 Tls1.2)
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HttpItem.IsSetSecurityProtocolType">
            <summary>
                是否设置SecurityProtocolType 默认为false
                如果需要设置具体属性,请使用SecProtocolTypeEx枚举
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.PostDataType">
            <summary>
                Post的数据格式默认为string
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.PostDataType.String">
            <summary>
                字符串
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.PostDataType.Byte">
            <summary>
                字节流
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.PostDataType.FilePath">
            <summary>
                文件路径
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.ResultType">
            <summary>
                返回类型
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.ResultType.String">
            <summary>
                表示只返回字符串
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.ResultType.Byte">
            <summary>
                表示只返回字节流
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.ResultType.So">
            <summary>
                急速请求,仅返回数据头
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.SecurityProtocolTypeEx">
            <summary>
                Https时的传输协议.
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.SecurityProtocolTypeEx.Ssl3">
            <summary>
            摘要: 
                指定安全套接字层 (SSL) 3.0 安全协议。
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.SecurityProtocolTypeEx.Tls">
            <summary>
            摘要: 
                指定传输层安全 (TLS) 1.0 安全协议。
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.SecurityProtocolTypeEx.Tls11">
            <summary>
                指定传输层安全 (TLS) 1.1 安全协议。
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.SecurityProtocolTypeEx.Tls12">
            <summary>
                指定传输层安全 (TLS) 1.2 安全协议。
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.HttpResult">
            <summary>
            请求结果类
            请求结果均包含在此类中
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HttpResult.ResponseUrl">
            <summary>
            响应结果的URL(可获取自动跳转后地址)   
            如果获取跳转后地址失败,请使用RedirectUrl属性,
            并设置HttpItems对象的Allowautoredirect =false;
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HttpResult.RedirectUrl">
            <summary>
            获取重定向的URL 
            使用本属性时,请先关闭自动跳转属性  
            设置方法如下:
            设置HttpItems对象的Allowautoredirect =false;
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HttpResult.Container">
            <summary>
            自动处理Cookie集合对象
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HttpResult.Cookie">
            <summary>
            Http请求返回的Cookie
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HttpResult.RawCookie">
            <summary>
            未清理/未合并时的 原始Cookie
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HttpResult.CookieCollection">
            <summary>
            Cookie对象集合
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HttpResult.Html">
            <summary>
            返回的String类型数据 只有ResultType.String时才返回数据，其它情况为空
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HttpResult.ResultByte">
            <summary>
            返回的Byte数组 只有ResultType.Byte时才返回数据，其它情况为空
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HttpResult.Header">
            <summary>
            返回请求的头数据
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.HttpResult.StatusCode">
            <summary>
            Http请求后的状态码(详细描述)类型为枚举类型
            如果需要使用数字型描述,请使用 StatusCodeNum
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HttpResult.StatusCodeNum">
            <summary>
            状态码的数字形式
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.HttpResult.StatusDescription">
            <summary>
            详细状态描述
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.Wininet">
            <summary>
            WinInet的方式请求数据
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.Wininet.UserAgent">
            <summary>
            默认UserAgent
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.Wininet.WininetTimeOut">
            <summary>
            Wininet超时时间 默认0 不设置超时,由于是自行实现(微软没修复超时的bug) 所以如果设置后,每次请求都会暂停.
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.Wininet.EncodingPack(System.IO.MemoryStream)">
            <summary>
            自动解析编码
            </summary>
            <param name="ms">结果流</param>
            <returns>异常时返回null</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Wininet.GetDataPro(System.IO.MemoryStream)">
            <summary>
            将内存流转换为字符串
            </summary>
            <param name="mstream">需要转换的流</param>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.Wininet.GetImage(System.IO.MemoryStream)">
            <summary>
            获取网页图片(Image)
            </summary>
            <param name="mstream">Stream流</param>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.Wininet.GetAllCookies(System.Net.CookieContainer)">
            <summary>
            遍历CookieContainer 转换为Cookie集合对象
            </summary>
            <param name="cc"></param>
            <returns>Cookie集合对象</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Wininet.StringToCookie(System.String,System.String)">
            <summary>
            将String转CookieContainer
            </summary>
            <param name="Domain">Cookie对应的Domain</param>
            <param name="cookie">具体值</param>
            <returns>转换后的Container对象</returns>
        </member>
        <member name="M:JetyDu.HttpParse.Wininet.CookieToString(System.Net.CookieContainer)">
            <summary>
            将CookieContainer转换为string类型
            </summary>
            <param name="cc">需要转换的Container对象</param>
            <returns>字符串结果</returns>
        </member>
        <member name="T:JetyDu.HttpParse.SystemTime">
            <summary>
            系统时间结构体
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.SystemTime.wYear">
            <summary>
            年
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.SystemTime.wMonth">
            <summary>
            月
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.SystemTime.wDayOfWeek">
            <summary>
            周
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.SystemTime.wDay">
            <summary>
            日
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.SystemTime.wHour">
            <summary>
            时
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.SystemTime.wMinute">
            <summary>
            分
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.SystemTime.wSecond">
            <summary>
            秒
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.SystemTime.wMiliseconds">
            <summary>
            毫秒
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.JetyduHttp">
            <summary>
            一键HTTP类库
            懒人库/快捷库
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.GetTime(System.String)">
            <summary>
            时间戳转为C#格式时间
            </summary>
            <param name="timeStamp">Unix时间戳格式</param>
            <returns>C#格式时间</returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.GetTimeByJs">
            <summary>
            获取JS时间戳 13位(反射 性能较差如果在乎性能,请考虑GetTimeByCSharp13 方法)
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.GetTimeByCSharp13(System.Int32)">
            <summary>
            返回13位时间戳 非JS方式
            </summary>
            <param name="nAddSecond"></param>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.GetTimeByCSharp">
            <summary>  
            获取时间戳 C# 10位 
            </summary>  
            <returns></returns>  
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.GetTimeToStamp(System.DateTime)">
            <summary>
            指定时间转换时间戳
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.GetServerTime(JetyDu.HttpParse.HttpResult)">
            <summary>
            获取服务器返回的时间,如果Header中没有Date则返回当前时间
            </summary>
            <param name="hrs">请求结果对象</param>
            <returns>返回本地时区Datatime数据</returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.GetTimeToGMTString(System.DateTime)">
            <summary>
            本地时间转成GMT时间 (参数如果不传入则为当前时间)
            本地时间为：2011-9-29 15:04:39
            转换后的时间为：Thu, 29 Sep 2011 07:04:39 GMT
            </summary>
            <param name="dt">参数如果不传入则为当前时间 DateTime.Now</param>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.GetTimeToGMTFormat(System.DateTime)">
             <summary>
            本地时间转成GMT格式的时间(参数如果不传入则为当前时间)
            本地时间为：2011-9-29 15:04:39
            转换后的时间为：Thu, 29 Sep 2011 15:04:39 GMT+0800
             </summary>
             <param name="dt">参数如果不传入则为当前时间 DateTime.Now</param>
             <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.GetTime4Gmt(System.String)">
            <summary>  
            GMT时间转成本地时间  
            DateTime dt1 = GMT2Local("Thu, 29 Sep 2011 07:04:39 GMT");
            转换后的dt1为：2011-9-29 15:04:39
            DateTime dt2 = GMT2Local("Thu, 29 Sep 2011 15:04:39 GMT+0800");
            转换后的dt2为：2011-9-29 15:04:39
            </summary>  
            <param name="gmt">字符串形式的GMT时间</param>  
            <returns></returns>  
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.GetStringMid(System.String,System.String,System.String)">
            <summary>
            取文本中间
            </summary>
            <param name="allStr">原字符</param>
            <param name="firstStr">前面的文本</param>
            <param name="lastStr">后面的文本</param>
            <returns>返回获取的值</returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.GetStringMids(System.String,System.String,System.String,System.String)">
            <summary>
            批量取文本中间
            </summary>
            <param name="allStr">原字符</param>
            <param name="firstStr">前面的文本</param>
            <param name="lastStr">后面的文本</param>
            <param name="regexCode">默认为万能表达式(.*?)</param>
            <returns>返回结果集合</returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.EnUrlMethod(System.String)">
            <summary>
            URL加密适用于淘宝中文编码算法
            </summary>
            <param name="str">明文</param>
            <returns>密文</returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.UrlEncoding(System.String,System.Text.Encoding)">
            <summary>
            Url编码,encoding默认为utf8编码
            </summary>
            <param name="str">需要编码的字符串</param>
            <param name="encoding">指定编码类型</param>
            <returns>编码后的字符串</returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.DeUrlMethod(System.String)">
            <summary>
            URL解密适用于淘宝中文编码算法
            </summary>
            <param name="str">密文</param>
            <returns>明文</returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.UrlDecoding(System.String,System.Text.Encoding)">
            <summary>
            Url解码,encoding默认为utf8编码
            </summary>
            <param name="str">需要解码的字符串</param>
            <param name="encoding">指定解码类型</param>
            <returns>解码后的字符串</returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.HtmlDecode(System.String)">
            <summary>
            Html解码
            </summary>
            <param name="str">需要解码的字符</param>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.Decode2Html(System.String,System.String)">
            <summary>
            解析任意符号开头的编码后续数据符合Hex编码
            </summary>
            <param name="param"></param>
            <param name="sp"></param>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.HtmlEncode(System.String)">
            <summary>
            Html编码 
            </summary>
            <param name="param">需要编码的字符</param>
            <returns>返回编码后数据</returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.Right(System.String,System.String,System.Int32)">
            <summary>
            取文本右边 
            默认取出右边所有文本,如果需要取固定长度请设置 length参数
            异常则返回空字符串
            </summary>
            <param name="str">原始字符串</param>
            <param name="right">需要确认位置的字符串</param>
            <param name="length">默认0,如果设置按照设置的值取出数据</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.Left(System.String,System.String,System.Int32)">
            <summary>
             取文本左边
             默认取出左边所有文本,如果需要取固定长度请设置 length参数
            异常则返回空字符串
            </summary>
            <param name="str">原始字符串</param>
            <param name="left">需要确认位置的字符串</param>
            <param name="length">默认0,如果设置按照设置的值取出数据</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.GetMidHtml(System.String,System.String,System.String)">
            <summary>
            取文本中间 正则方式
            </summary>
            <param name="html">原始Html</param>
            <param name="s">开始字符串</param>
            <param name="e">结束字符串</param>
            <returns>返回获取结果</returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.FromUnicodeString(System.String,System.String,System.String)">
            <summary>
            Unicode字符转汉字 允许自定义分隔字符
            </summary>
            <param name="str">需要转换的字符串</param>
            <param name="SplitString">分隔字符</param>
            <param name="TrimStr">如果有尾部数据则填写尾部</param>
            <returns>处理后结果</returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.GetUnicodeString(System.String,System.String)">
            <summary>
            汉字转Unicode字符 默认\u1234 
            </summary>
            <param name="param">需要转换的字符</param>
            <param name="SplitString">分隔结果</param>
            <returns>转换后结果</returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.GetString2Base64(System.String,System.Text.Encoding)">
            <summary>
            将字符串转换为base64格式 默认UTF8编码
            </summary>
            <param name="str">原始字符串</param>
            <param name="encoding">编码</param>
            <returns>结果</returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.GetStringbyBase64(System.String,System.Text.Encoding)">
            <summary>
            base64字符串转换为普通格式 默认UTF8编码
            </summary>
            <param name="str">原始字符串</param>
            <param name="encoding">编码</param>
            <returns>结果</returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.GetAscii2string(System.Byte[])">
            <summary>
            将byte数组转换为AscII字符
            </summary>
            <param name="b">需要操作的数组</param>
            <returns>结果</returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.Bytes2HexString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将字节数组转化为十六进制字符串，每字节表示为两位
            </summary>
            <param name="bytes">需要操作的数组</param>
            <param name="start">起始位置</param>
            <param name="len">长度</param>
            <returns>字符串结果</returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.HexToStr(System.String)">
            <summary>
            字符串转16进制
            </summary>
            <param name="mHex">需要转换的字符串</param>
            <returns>返回十六进制代表的字符串</returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.HexString2Bytes(System.String)">
            <summary>
            将十六进制字符串转化为字节数组
            </summary>
            <param name="src">需要转换的字符串</param>
            <returns>结果数据</returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.UpdateCookie(System.String,System.String)">
            <summary>
            合并Cookie，将cookie2与cookie1合并更新 返回字符串类型Cookie
            </summary>
            <param name="cookie1">旧cookie</param>
            <param name="cookie2">新cookie</param>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.ClearCookie(System.String)">
            <summary>
            清理string类型Cookie.剔除无用项返回结果为null时遇见错误.
            </summary>
            <param name="Cookies"></param>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.GetAllCookieByHttpItems(JetyDu.HttpParse.HttpItem)">
            <summary>
            获取当前请求所有Cookie
            </summary>
            <param name="items"></param>
            <returns>Cookie集合</returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.GetAllCookie(System.Net.CookieContainer)">
            <summary>
            获取CookieContainer 中的所有对象
            </summary>
            <param name="cc"></param>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.CookieTostring(System.Net.CookieContainer)">
            <summary>
            将 CookieContainer 对象转换为字符串类型
            </summary>
            <param name="cc"></param>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.StringToCookie(System.String,System.String)">
            <summary>
            将文字Cookie转换为CookieContainer 对象
            </summary>
            <param name="url"></param>
            <param name="cookie"></param>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.AddCookieToContainer(System.Net.CookieContainer,System.String,System.String)">
            <summary>
            【不推荐使用】 推荐使用字符串方式维护Cookie
            将StringCookie 添加到 CookieContainer对象中
            当CookieContainer出现问题时请调用本方法修复 CookieContainer对象
            更新失败时,返回原来的CookieContainer对象
            
            </summary>
            <param name="cookie_container">需要更新的cookie_container</param>
            <param name="cookie">字符串cookie</param>
            <param name="domain">domain默认为空</param>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.InternetSetCookie(System.String,System.String,System.String)">
            
             设置cookie
            
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.InternetGetCookie(System.String,System.String,System.Text.StringBuilder,System.Int32@)">
            
             获取cookie
            
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.SetIeCookie(System.String,System.String)">
            <summary>
            设置IE cookie
            </summary>
            <param name="GetUrl">URL</param>
            <param name="NewCookie">Cookie</param>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.ClearIECookie">
            <summary>
            删除IE COOKIE
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.JetyduHttp.INTERNET_OPTION_END_BROWSER_SESSION">
            <summary>
            默认常量
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.InternetSetOption(System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            设置IE
            </summary>
            <param name="hInternet">hInternet</param>
            <param name="dwOption">dwOption</param>
            <param name="lpBuffer">lpBuffer</param>
            <param name="lpdwBufferLength">lpdwBufferLength</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.FileDelete(System.String)">
            <summary>
            删除一个文件，System.IO.File.Delete()函数不可以删除只读文件，这个函数可以强行把只读文件删除。
            </summary>
            <param name="path">文件路径</param>
            <returns>成功为true</returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.FolderClear(System.String)">
            <summary>
            删除文件夹
            </summary>
            <param name="path">文件夹路径</param>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.CleanHistory">
            <summary>
            删除历史记录  Win7+ 需要管理员权限
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.CleanTempFiles">
            <summary>
             删除临时文件  Win7+ 需要管理员权限
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.CleanCookie">
            <summary>
            删除Cookie文件 Win7+ 需要管理员权限
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.CleanAll">
            
             删除全部 历史记录,Cookie,临时文件
            
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.RunCmd(System.String)">
            <summary>
            调用CMD执行命令
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.RunJsMethod(System.String,System.String,System.String,System.String)">
            <summary>
            执行js代码(JS代码,参数,调用方法名,方法名[默认Eval 可选Run])
            </summary>
            <param name="reString">JS代码</param>
            <param name="para">参数</param>
            <param name="MethodName">调用方法名</param>
            <param name="Method">方法名:默认Eval 可选Run</param>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.OpenUrl(System.String,System.Int32)">
            <summary>
            打开指定URL openType:0使用IE打开,!=0 使用默认浏览器打开
            </summary>
            <param name="url">需要打开的地址</param>
            <param name="openType">0使用IE,其他使用默认</param>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.EncryptMD5String(System.String)">
            <summary>
            字符串MD5加密
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.GetAList(System.String)">
            <summary>
            获取所有的A标签
            </summary>
            <param name="html">要分析的Html代码</param>
            <returns>返回一个List存储所有的A标签</returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.GetImgList(System.String)">
            <summary>
            获取所有的Img标签
            </summary>
            <param name="html">要分析的Html代码</param>
            <returns>返回一个List存储所有的Img标签</returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.StripHTML(System.String)">
            <summary>
            过滤html标签
            </summary>
            <param name="html">html的内容</param>
            <returns>处理后的文本</returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.ReplaceNewLine(System.String)">
            <summary>
            过滤html中所有的换行符号
            </summary>
            <param name="html">html的内容</param>
            <returns>处理后的文本</returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.GetHtmlTitle(System.String)">
            <summary>
            提取网页Title
            </summary>
            <param name="html">Html</param>
            <returns>返回Title</returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.DonwnLoad(System.String,System.String,System.Net.CookieContainer,System.String)">
            <summary>
            文件下载[如果连接不是绝对路径存在跳转默认会自动跳转]
            会自动分析协议头中的filename
            如果分析失败则直接存储为默认名[默认为:.zip格式].
            成功返回true;
            </summary>
            <param name="url">下载地址</param>
            <param name="paths">保存绝对路径 如:c://download//</param>
            <param name="cc">Cookie</param>
            <param name="defaultName">默认后缀</param>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.WebClientDonwnLoad(System.String,System.String,System.String,System.Net.CookieContainer@,System.Text.Encoding,System.String)">
            <summary>
            文件下载[如果连接不是绝对路径存在跳转默认会自动跳转]
            会自动分析协议头中的filename
            如果分析失败则直接存储为默认名[默认为:.zip格式]
            成功返回true;
            </summary>
            <param name="Url">请求地址</param>
            <param name="paths">保存位置</param>
            <param name="Referer">referer</param>
            <param name="cc">cc</param>
            <param name="Encoder">编码</param>
            <param name="defaultName">默认后缀</param>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.UploadPost(System.String,System.String,System.String,System.Net.CookieContainer@,System.Text.Encoding)">
            <summary>
            WebClient Post 上传
            用于上传类型为multipart/form-data 
            如果上传失败,请检查协议头是否有自定义协议头.如Ajax头
            </summary>
            <param name="Url">上传地址</param>
            <param name="Referer">referer</param>
            <param name="PostData"></param>
            <param name="cc">Cookie</param>
            <param name="Encoder">编码默认utf8</param> 
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.GetHtml(System.String)">
            <summary>
            普通请求.直接返回标准结果
            </summary>
            <param name="url">请求的URL</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.GetHtml(System.String,System.String,System.Int32)">
            <summary>
            普通请求.直接返回标准结果
            </summary>
            <param name="url">请求的URL</param>
            <param name="ipProxy">代理IP地址</param>
            <param name="TimeOut">超时时间</param>
            <returns>结果对象</returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.GetHtml(System.String,System.Net.CookieContainer,System.Int32)">
            <summary>
            普通请求.直接返回标准结果
            </summary>
            <param name="url">请求的URL</param>
            <param name="cc">当前Cookie</param>
            <param name="TimeOut">超时时间</param>
            <returns>结果对象</returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.GetHtml(System.String,System.Net.CookieContainer,System.String,System.Int32)">
             <summary>
             普通请求.直接返回标准结果
             </summary>
             <param name="url">请求的URL</param>
             <param name="cc">当前Cookie</param>
            <param name="ipProxy">代理IP地址</param>
             <param name="TimeOut">超时时间</param>
             <returns>结果对象</returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.GetImage(System.String,System.String,System.Net.CookieContainer,System.Int32)">
            <summary>
             普通请求.直接返回标准结果
            </summary>
            <param name="picurl">图片请求地址</param>
            <param name="referer">上一次请求地址</param>
            <param name="cc">当前Cookie</param>
            <param name="TimeOut">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.GetImageByImage(System.String,System.String,System.Net.CookieContainer)">
            <summary>
            普通请求.直接返回Image格式图像
            </summary>
            <param name="picurl">图片请求地址</param>
            <param name="referer">上一次请求地址</param>
            <param name="cc">当前Cookie</param>
            <returns></returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.GetBase64Image(System.String)">
            <summary>
            针对于Base64形式的图片/验证码
            </summary>
            <param name="StrBaser64">信息</param>
            <returns>图像结果</returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.PostHtml(System.String,System.String,System.String,System.Boolean,System.Net.CookieContainer,System.Int32)">
            <summary>
            普通请求.直接返回标准结果
            </summary>
            <param name="posturl">post地址</param>
            <param name="referer">上一次请求地址</param>
            <param name="postdata">请求数据</param>
            <param name="IsAjax">是否需要异步标识</param>
            <param name="cc">当前Cookie</param>
            <param name="TimeOut">超时时间</param>
            <returns>返回数据结果</returns>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.PostHtmlAsync(JetyDu.HttpParse.HttpItem)">
            <summary>
            异步POST请求 通过回调返回结果
            </summary>
            <param name="objHttpItems">请求项</param>
        </member>
        <member name="M:JetyDu.HttpParse.JetyduHttp.GetHtmlAsync(JetyDu.HttpParse.HttpItem)">
            <summary>
            异步GET请求 通过回调返回结果
            </summary>
            <param name="objHttpItems">请求项</param>
        </member>
        <member name="T:JetyDu.HttpParse.RegexString">
            <summary>
            正则表达式静态类
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.RegexString.Alist">
            <summary>
            获取所有的A链接
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.RegexString.ImgList">
            <summary>
            获取所有的Img标签
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.RegexString.Nscript">
            <summary>
            所有的Nscript
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.RegexString.Style">
            <summary>
            所有的Style
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.RegexString.Script">
            <summary>
            所有的Script
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.RegexString.Html">
            <summary>
            所有的Html
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.RegexString.NewLine">
            <summary>
            换行符号
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.RegexString.Enconding">
             <summary>
            获取网页编码
             </summary>
        </member>
        <member name="F:JetyDu.HttpParse.RegexString.AllHtml">
            <summary>
            所有Html
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.RegexString.HtmlTitle">
            <summary>
            title
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.ImgItem">
            <summary>
            图片对象 
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.ImgItem.Src">
            <summary>
            图片网址
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.ImgItem.Html">
            <summary>
            图片标签Html
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.AItem">
            <summary>
            A链接对象   
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.AItem.Href">
            <summary>
            链接地址
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.AItem.Text">
            <summary>
            链接文本
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.AItem.Img">
            <summary>
            链接的图片 
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.AItem.Html">
            <summary>
            整个连接Html
            </summary>
        </member>
        <member name="P:JetyDu.HttpParse.AItem.Type">
            <summary>
            A链接的类型 文本/图像
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.AType">
            <summary>
            A 标签类型
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.AType.Text">
            <summary>
            文本链接(默认)
            </summary>
        </member>
        <member name="F:JetyDu.HttpParse.AType.Img">
            <summary>
            图片链接
            </summary>
        </member>
        <member name="T:JetyDu.HttpParse.StreamEncoder">
            <summary>
            从流识别编码
            </summary>
        </member>
        <member name="M:JetyDu.HttpParse.StreamEncoder.GetEncoding(System.String)">
            <summary>   
            取得一个文本文件的编码方式。如果无法在文件头部找到有效的前导符，Encoding.Default将被返回。   
            </summary>   
            <param name="fileName">文件名。</param>   
            <returns></returns>   
        </member>
        <member name="M:JetyDu.HttpParse.StreamEncoder.GetEncoding(System.IO.FileStream)">
            <summary>   
            取得一个文本文件流的编码方式。   
            </summary>   
            <param name="stream">文本文件流。</param>   
            <returns></returns>   
        </member>
        <member name="M:JetyDu.HttpParse.StreamEncoder.GetEncoding(System.String,System.Text.Encoding)">
            <summary>   
            取得一个文本文件的编码方式。   
            </summary>   
            <param name="fileName">文件名。</param>   
            <param name="defaultEncoding">默认编码方式。当该方法无法从文件的头部取得有效的前导符时，将返回该编码方式。</param>   
            <returns></returns>   
        </member>
        <member name="M:JetyDu.HttpParse.StreamEncoder.GetEncoding(System.IO.FileStream,System.Text.Encoding)">
            <summary>   
            取得一个文本文件流的编码方式。   
            </summary>   
            <param name="stream">文本文件流。</param>   
            <param name="defaultEncoding">默认编码方式。当该方法无法从文件的头部取得有效的前导符时，将返回该编码方式。</param>   
            <returns></returns>   
        </member>
        <member name="M:JetyDu.HttpParse.StreamEncoder.GetEncodingFromBytes(System.Byte[])">
            <summary>
            从字节数组中返回字符编码
            </summary>
            <param name="sen">字节数组</param>
            <returns>编码结果</returns>
        </member>
        <member name="M:JetyDu.HttpParse.StreamEncoder.GetEncoding(System.IO.Stream)">
            <summary>   
            通过给定的文件流，判断文件的编码类型   
            </summary>   
            <param name="fs">文件流</param>   
            <returns>文件的编码类型</returns>   
        </member>
        <member name="M:JetyDu.HttpParse.StreamEncoder.IsUTF8Bytes(System.Byte[])">
            <summary>   
            判断是否是不带 BOM 的 UTF8 格式   
            </summary>   
            <param name="data"></param>   
            <returns></returns>   
        </member>
    </members>
</doc>
